   1              		.file	"main.cpp"
   2              	# GNU C++17 (GCC) version 11.1.0 (x86_64-pc-linux-gnu)
   3              	#	compiled by GNU C version 11.1.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl v
   4              	
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed: -mtune=generic -march=x86-64 -g -O2 -std=c++17 -fno-sanitize-recover -fstack-prot
   7              		.text
   8              	.Ltext0:
   9              		.globl	__asan_stack_malloc_0
  10              		.section	.rodata.str1.1,"aMS",@progbits,1
  11              	.LC0:
  12 0000 31203332 		.string	"1 32 4 4 n:36"
  12      20342034 
  12      206E3A33 
  12      3600
  13              		.section	.text.startup,"ax",@progbits
  14              		.p2align 4
  15              		.globl	main
  17              	main:
  18              	.LASANPC11038:
  19              	.LFB11038:
  20              		.file 1 "main.cpp"
   1:main.cpp      **** #include <bits/stdc++.h>
   2:main.cpp      **** using namespace std;
   3:main.cpp      **** 
   4:main.cpp      **** #define all(v) v.begin(), v.end()
   5:main.cpp      **** #define SPEED ios_base::sync_with_stdio(false);cin.tie(nullptr)
   6:main.cpp      **** #define rep(i,n) for(int i=0; i<(int)(n); i++)
   7:main.cpp      **** #define fi first
   8:main.cpp      **** #define se second
   9:main.cpp      **** #define mp make_pair
  10:main.cpp      **** #define pb push_back
  11:main.cpp      **** #define eb emplace_back
  12:main.cpp      **** #define ep emplace
  13:main.cpp      **** #define te try_emplace
  14:main.cpp      **** 
  15:main.cpp      **** typedef long long ll;
  16:main.cpp      **** typedef unsigned long long ull;
  17:main.cpp      **** typedef pair<int,int> ii;
  18:main.cpp      **** typedef vector<int> vi;
  19:main.cpp      **** typedef vector<ii> vii;
  20:main.cpp      **** typedef vector<long long int> vll;
  21:main.cpp      **** typedef vector<char> vc;
  22:main.cpp      **** typedef long double ld;
  23:main.cpp      **** typedef istringstream iss;
  24:main.cpp      **** 
  25:main.cpp      **** typedef set<int>::iterator sit;
  26:main.cpp      **** typedef map<int,int>::iterator mit;
  27:main.cpp      **** typedef vector<int>::iterator vit;
  28:main.cpp      **** typedef vector<long long int>::iterator vllit;
  29:main.cpp      **** 
  30:main.cpp      **** [[maybe_unused]] const int INF = 1e9 + 7;
  31:main.cpp      **** [[maybe_unused]] const int MOD = 1e9 + 7;
  32:main.cpp      **** [[maybe_unused]] const int MAXN = 1e6 + 3;
  33:main.cpp      **** 
  34:main.cpp      **** int main() {
  21              		.loc 1 34 12 view -0
  22              		.cfi_startproc
  23 0000 4157     		pushq	%r15	#
  24              		.cfi_def_cfa_offset 16
  25              		.cfi_offset 15, -16
  26 0002 4156     		pushq	%r14	#
  27              		.cfi_def_cfa_offset 24
  28              		.cfi_offset 14, -24
  29 0004 4155     		pushq	%r13	#
  30              		.cfi_def_cfa_offset 32
  31              		.cfi_offset 13, -32
  32 0006 4154     		pushq	%r12	#
  33              		.cfi_def_cfa_offset 40
  34              		.cfi_offset 12, -40
  35 0008 55       		pushq	%rbp	#
  36              		.cfi_def_cfa_offset 48
  37              		.cfi_offset 6, -48
  38 0009 53       		pushq	%rbx	#
  39              		.cfi_def_cfa_offset 56
  40              		.cfi_offset 3, -56
  41 000a 4881EC98 		subq	$152, %rsp	#,
  41      000000
  42              		.cfi_def_cfa_offset 208
  43 0011 488D4424 		leaq	80(%rsp), %rax	#, tmp345
  43      50
  44 0016 48894424 		movq	%rax, 24(%rsp)	# tmp345, %sfp
  44      18
  45 001b 48894424 		movq	%rax, 32(%rsp)	# tmp345, %sfp
  45      20
  46 0020 8B050000 		movl	__asan_option_detect_stack_use_after_return(%rip), %eax	# __asan_option_detect_stack_use_afte
  46      0000
  47 0026 85C0     		testl	%eax, %eax	#
  48 0028 0F85FF08 		jne	.L119	#,
  48      0000
  49              	.L1:
  35:main.cpp      ****     // SPEED;
  36:main.cpp      ****     int n;
  50              		.loc 1 36 5 view .LVU1
  37:main.cpp      ****     cin >> n;
  51              		.loc 1 37 5 view .LVU2
  52              	# main.cpp:34: int main() {
  34:main.cpp      ****     // SPEED;
  53              		.loc 1 34 12 is_stmt 0 view .LVU3
  54 002e 488B4424 		movq	24(%rsp), %rax	# %sfp, tmp345
  54      18
  55              	# main.cpp:37:     cin >> n;
  56              		.loc 1 37 12 view .LVU4
  57 0033 4C8D2D00 		leaq	_ZSt3cin(%rip), %r13	#, tmp539
  57      000000
  58              	# main.cpp:34: int main() {
  34:main.cpp      ****     // SPEED;
  59              		.loc 1 34 12 view .LVU5
  60 003a 488D7840 		leaq	64(%rax), %rdi	#, tmp347
  61 003e 48897C24 		movq	%rdi, 16(%rsp)	# tmp347, %sfp
  61      10
  62 0043 488D3D00 		leaq	.LC0(%rip), %rdi	#, tmp570
  62      000000
  63 004a 48897808 		movq	%rdi, 8(%rax)	# tmp570,
  64 004e 488D3DAB 		leaq	.LASANPC11038(%rip), %rdi	#, tmp572
  64      FFFFFF
  65 0055 48C700B3 		movq	$1102416563, (%rax)	#,
  65      8AB541
  66 005c 48897810 		movq	%rdi, 16(%rax)	# tmp572,
  67 0060 48C1E803 		shrq	$3, %rax	#, tmp350
  68 0064 48894424 		movq	%rax, 40(%rsp)	# tmp350, %sfp
  68      28
  69 0069 C7800080 		movl	$-235802127, 2147450880(%rax)	#,
  69      FF7FF1F1 
  69      F1F1
  70 0073 C7800480 		movl	$-202116348, 2147450884(%rax)	#,
  70      FF7F04F3 
  70      F3F3
  71              	# main.cpp:37:     cin >> n;
  72              		.loc 1 37 12 view .LVU6
  73 007d 4C89E8   		movq	%r13, %rax	# tmp539, tmp354
  74 0080 48C1E803 		shrq	$3, %rax	#, tmp354
  75 0084 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_46
  75      FF7F00
  76 008b 0F852C09 		jne	.L120	#,
  76      0000
  77 0091 48B9692D 		movabsq	$-7070675565921424023, %rcx	#, tmp358
  77      38EB08EA 
  77      DF9D
  78 009b 4C8D3D00 		leaq	__ubsan_vptr_type_cache(%rip), %r15	#, tmp543
  78      000000
  79 00a2 48BAA42C 		movabsq	$-8664976708444, %rdx	#, tmp357
  79      24871EF8 
  79      FFFF
  80 00ac 48331500 		xorq	_ZSt3cin(%rip), %rdx	# cin._vptr.basic_istream, tmp356
  80      000000
  81 00b3 480FAFD1 		imulq	%rcx, %rdx	# tmp358, _145
  82 00b7 4889D0   		movq	%rdx, %rax	# _145, tmp359
  83 00ba 48331500 		xorq	_ZSt3cin(%rip), %rdx	# cin._vptr.basic_istream, tmp360
  83      000000
  84 00c1 48C1E02F 		salq	$47, %rax	#, tmp359
  85 00c5 4831D0   		xorq	%rdx, %rax	# tmp360, tmp361
  86 00c8 480FAFC1 		imulq	%rcx, %rax	# tmp358, _18
  87 00cc 4889C2   		movq	%rax, %rdx	# _18, tmp363
  88 00cf 48C1E22F 		salq	$47, %rdx	#, tmp363
  89 00d3 4831C2   		xorq	%rax, %rdx	# _18, tmp364
  90 00d6 480FAFD1 		imulq	%rcx, %rdx	# tmp358, _56
  91 00da 4889D0   		movq	%rdx, %rax	# _56, tmp367
  92 00dd 83E07F   		andl	$127, %eax	#, tmp367
  93 00e0 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _56, __ubsan_vptr_type_cache[_135]
  94 00e4 0F85A808 		jne	.L121	#,
  94      0000
  95              	.L6:
  96 00ea 488B4424 		movq	16(%rsp), %rax	# %sfp, tmp347
  96      10
  97 00ef 4C89EF   		movq	%r13, %rdi	# tmp539,
  98              	# main.cpp:41:     while (cin >> n) {
  38:main.cpp      ****     int best {0};
  39:main.cpp      ****     int worst {0};
  40:main.cpp      ****     int amazing {0};
  41:main.cpp      ****     while (cin >> n) {
  99              		.loc 1 41 19 view .LVU7
 100 00f2 48BB692D 		movabsq	$-7070675565921424023, %rbx	#, tmp547
 100      38EB08EA 
 100      DF9D
 101              	# main.cpp:37:     cin >> n;
  37:main.cpp      ****     int best {0};
 102              		.loc 1 37 12 view .LVU8
 103 00fc 4C8D70E0 		leaq	-32(%rax), %r14	#, tmp542
 104 0100 4C89F6   		movq	%r14, %rsi	# tmp542,
 105 0103 4C89F5   		movq	%r14, %rbp	# tmp542, tmp542
 106 0106 E8000000 		call	_ZNSirsERi@PLT	#
 106      00
 107              	.LVL0:
 108              	# main.cpp:40:     int amazing {0};
  40:main.cpp      ****     while (cin >> n) {
 109              		.loc 1 40 9 view .LVU9
 110 010b 4531C9   		xorl	%r9d, %r9d	# amazing
 111              	# main.cpp:38:     int best {0};
  38:main.cpp      ****     int best {0};
 112              		.loc 1 38 9 view .LVU10
 113 010e 4531D2   		xorl	%r10d, %r10d	# best
 114              	# main.cpp:39:     int worst {0};
  39:main.cpp      ****     int amazing {0};
 115              		.loc 1 39 9 view .LVU11
 116 0111 C744240C 		movl	$0, 12(%rsp)	#, %sfp
 116      00000000 
 117 0119 4589CC   		movl	%r9d, %r12d	# amazing, amazing
 118 011c 4589D6   		movl	%r10d, %r14d	# best, best
 119 011f E9920100 		jmp	.L7	#
 119      00
 120              	.LVL1:
 121              		.p2align 4,,10
 122 0124 0F1F4000 		.p2align 3
 123              	.L137:
 124              	# main.cpp:41:     while (cin >> n) {
 125              		.loc 1 41 19 view .LVU12
 126 0128 4939C0   		cmpq	%rax, %r8	# _33, _251
 127 012b 0F829C02 		jb	.L27	#,
 127      0000
 128              	.L26:
 129              	# main.cpp:41:     while (cin >> n) {
 130              		.loc 1 41 19 discriminator 1 view .LVU13
 131 0131 4D85C0   		testq	%r8, %r8	# _251
 132 0134 0F84D506 		je	.L28	#,
 132      0000
 133 013a 41F6C007 		testb	$7, %r8b	#, _251
 134 013e 0F85CB06 		jne	.L28	#,
 134      0000
 135 0144 4D85DB   		testq	%r11, %r11	# _10
 136 0147 0F88B302 		js	.L30	#,
 136      0000
 137              	# main.cpp:41:     while (cin >> n) {
 138              		.loc 1 41 19 view .LVU14
 139 014d 4939C0   		cmpq	%rax, %r8	# _33, _251
 140 0150 0F82B302 		jb	.L32	#,
 140      0000
 141              	.L31:
 142              	# main.cpp:41:     while (cin >> n) {
 143              		.loc 1 41 19 discriminator 1 view .LVU15
 144 0156 4D85DB   		testq	%r11, %r11	# _10
 145 0159 0F88C102 		js	.L33	#,
 145      0000
 146              	# main.cpp:41:     while (cin >> n) {
 147              		.loc 1 41 19 view .LVU16
 148 015f 4939C0   		cmpq	%rax, %r8	# _33, _251
 149 0162 0F82C102 		jb	.L35	#,
 149      0000
 150              	.L34:
 151              	# main.cpp:41:     while (cin >> n) {
 152              		.loc 1 41 19 discriminator 1 view .LVU17
 153 0168 4C89C2   		movq	%r8, %rdx	# _251, tmp426
 154 016b 48C1EA03 		shrq	$3, %rdx	#, tmp426
 155 016f 80BA0080 		cmpb	$0, 2147450880(%rdx)	#, *_238
 155      FF7F00
 156 0176 0F85E606 		jne	.L122	#,
 156      0000
 157 017c 48BEA56E 		movabsq	$8135312701535973029, %rsi	#, tmp428
 157      C69FCC6F 
 157      E670
 158 0186 498B08   		movq	(%r8), %rcx	# MEM[(struct basic_ios *)_11]._vptr.ios_base, _13
 159 0189 4831CE   		xorq	%rcx, %rsi	# _13, tmp427
 160 018c 480FAFF3 		imulq	%rbx, %rsi	# tmp547, _241
 161 0190 4889F2   		movq	%rsi, %rdx	# _241, tmp430
 162 0193 4831CE   		xorq	%rcx, %rsi	# _13, tmp431
 163 0196 48C1E22F 		salq	$47, %rdx	#, tmp430
 164 019a 4831D6   		xorq	%rdx, %rsi	# tmp430, tmp432
 165 019d 480FAFF3 		imulq	%rbx, %rsi	# tmp547, _245
 166 01a1 4889F2   		movq	%rsi, %rdx	# _245, tmp434
 167 01a4 48C1E22F 		salq	$47, %rdx	#, tmp434
 168 01a8 4831F2   		xorq	%rsi, %rdx	# _245, tmp435
 169 01ab 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _248
 170 01af 4889D6   		movq	%rdx, %rsi	# _248, tmp438
 171 01b2 83E67F   		andl	$127, %esi	#, tmp438
 172 01b5 493914F7 		cmpq	%rdx, (%r15,%rsi,8)	# _248, __ubsan_vptr_type_cache[_249]
 173 01b9 0F856706 		jne	.L123	#,
 173      0000
 174              	.L37:
 175 01bf 4D85DB   		testq	%r11, %r11	# _10
 176 01c2 0F881802 		js	.L38	#,
 176      0000
 177              	# main.cpp:41:     while (cin >> n) {
 178              		.loc 1 41 19 view .LVU18
 179 01c8 4939C0   		cmpq	%rax, %r8	# _33, _251
 180 01cb 0F821802 		jb	.L40	#,
 180      0000
 181              	.L39:
 182              	.LVL2:
 183              	.LBB42:
 184              	.LBI42:
 185              		.file 2 "/usr/include/c++/11.1.0/bits/basic_ios.h"
   1:/usr/include/c++/11.1.0/bits/basic_ios.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
   3:/usr/include/c++/11.1.0/bits/basic_ios.h **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/basic_ios.h **** //
   5:/usr/include/c++/11.1.0/bits/basic_ios.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/basic_ios.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/basic_ios.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/basic_ios.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/basic_ios.h **** // any later version.
  10:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  11:/usr/include/c++/11.1.0/bits/basic_ios.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/basic_ios.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/basic_ios.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/basic_ios.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  16:/usr/include/c++/11.1.0/bits/basic_ios.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/basic_ios.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/basic_ios.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  20:/usr/include/c++/11.1.0/bits/basic_ios.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/basic_ios.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/basic_ios.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/basic_ios.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  25:/usr/include/c++/11.1.0/bits/basic_ios.h **** /** @file bits/basic_ios.h
  26:/usr/include/c++/11.1.0/bits/basic_ios.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11.1.0/bits/basic_ios.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/11.1.0/bits/basic_ios.h ****  */
  29:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  30:/usr/include/c++/11.1.0/bits/basic_ios.h **** #ifndef _BASIC_IOS_H
  31:/usr/include/c++/11.1.0/bits/basic_ios.h **** #define _BASIC_IOS_H 1
  32:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  33:/usr/include/c++/11.1.0/bits/basic_ios.h **** #pragma GCC system_header
  34:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  35:/usr/include/c++/11.1.0/bits/basic_ios.h **** #include <bits/localefwd.h>
  36:/usr/include/c++/11.1.0/bits/basic_ios.h **** #include <bits/locale_classes.h>
  37:/usr/include/c++/11.1.0/bits/basic_ios.h **** #include <bits/locale_facets.h>
  38:/usr/include/c++/11.1.0/bits/basic_ios.h **** #include <bits/streambuf_iterator.h>
  39:/usr/include/c++/11.1.0/bits/basic_ios.h **** #include <bits/move.h>
  40:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  41:/usr/include/c++/11.1.0/bits/basic_ios.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11.1.0/bits/basic_ios.h **** {
  43:/usr/include/c++/11.1.0/bits/basic_ios.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  45:/usr/include/c++/11.1.0/bits/basic_ios.h ****   template<typename _Facet>
  46:/usr/include/c++/11.1.0/bits/basic_ios.h ****     inline const _Facet&
  47:/usr/include/c++/11.1.0/bits/basic_ios.h ****     __check_facet(const _Facet* __f)
  48:/usr/include/c++/11.1.0/bits/basic_ios.h ****     {
  49:/usr/include/c++/11.1.0/bits/basic_ios.h ****       if (!__f)
  50:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	__throw_bad_cast();
  51:/usr/include/c++/11.1.0/bits/basic_ios.h ****       return *__f;
  52:/usr/include/c++/11.1.0/bits/basic_ios.h ****     }
  53:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  54:/usr/include/c++/11.1.0/bits/basic_ios.h ****   /**
  55:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  @brief Template class basic_ios, virtual base class for all
  56:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  stream classes. 
  57:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  @ingroup io
  58:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *
  59:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  @tparam _CharT  Type of character stream.
  60:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *
  63:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  Most of the member functions called dispatched on stream objects
  64:/usr/include/c++/11.1.0/bits/basic_ios.h ****    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
  65:/usr/include/c++/11.1.0/bits/basic_ios.h ****   */
  66:/usr/include/c++/11.1.0/bits/basic_ios.h ****   template<typename _CharT, typename _Traits>
  67:/usr/include/c++/11.1.0/bits/basic_ios.h ****     class basic_ios : public ios_base
  68:/usr/include/c++/11.1.0/bits/basic_ios.h ****     {
  69:/usr/include/c++/11.1.0/bits/basic_ios.h ****     public:
  70:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@{
  71:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
  72:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  These are standard types.  They permit a standardized way of
  73:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  referring to names of (or names dependent on) the template
  74:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  parameters, which are specific to the implementation.
  75:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
  76:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef _CharT                                 char_type;
  77:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef typename _Traits::int_type             int_type;
  78:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef typename _Traits::pos_type             pos_type;
  79:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef typename _Traits::off_type             off_type;
  80:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef _Traits                                traits_type;
  81:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@}
  82:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  83:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@{
  84:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
  85:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  These are non-standard types.
  86:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
  87:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef ctype<_CharT>                          __ctype_type;
  88:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  89:/usr/include/c++/11.1.0/bits/basic_ios.h **** 						     __num_put_type;
  90:/usr/include/c++/11.1.0/bits/basic_ios.h ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
  91:/usr/include/c++/11.1.0/bits/basic_ios.h **** 						     __num_get_type;
  92:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@}
  93:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
  94:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // Data members:
  95:/usr/include/c++/11.1.0/bits/basic_ios.h ****     protected:
  96:/usr/include/c++/11.1.0/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*                _M_tie;
  97:/usr/include/c++/11.1.0/bits/basic_ios.h ****       mutable char_type                              _M_fill;
  98:/usr/include/c++/11.1.0/bits/basic_ios.h ****       mutable bool                                   _M_fill_init;
  99:/usr/include/c++/11.1.0/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*              _M_streambuf;
 100:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 101:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // Cached use_facet<ctype>, which is based on the current locale info.
 102:/usr/include/c++/11.1.0/bits/basic_ios.h ****       const __ctype_type*                            _M_ctype;
 103:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // For ostream.
 104:/usr/include/c++/11.1.0/bits/basic_ios.h ****       const __num_put_type*                          _M_num_put;
 105:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // For istream.
 106:/usr/include/c++/11.1.0/bits/basic_ios.h ****       const __num_get_type*                          _M_num_get;
 107:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 108:/usr/include/c++/11.1.0/bits/basic_ios.h ****     public:
 109:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@{
 110:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 111:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  The quick-and-easy status check.
 112:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 113:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  This allows you to write constructs such as
 114:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
 115:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 116:/usr/include/c++/11.1.0/bits/basic_ios.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/11.1.0/bits/basic_ios.h ****       explicit operator bool() const
 186              		.loc 2 117 16 is_stmt 1 discriminator 1 view .LVU19
 187              	.LBB43:
 188              	.LBI43:
 118:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return !this->fail(); }
 119:/usr/include/c++/11.1.0/bits/basic_ios.h **** #else
 120:/usr/include/c++/11.1.0/bits/basic_ios.h ****       operator void*() const
 121:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }
 122:/usr/include/c++/11.1.0/bits/basic_ios.h **** #endif
 123:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 124:/usr/include/c++/11.1.0/bits/basic_ios.h ****       bool
 125:/usr/include/c++/11.1.0/bits/basic_ios.h ****       operator!() const
 126:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return this->fail(); }
 127:/usr/include/c++/11.1.0/bits/basic_ios.h ****       ///@}
 128:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 129:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 130:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  Returns the error state of the stream buffer.
 131:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @return  A bit pattern (well, isn't everything?)
 132:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 133:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 134:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  users will call one of the interpreting wrappers, e.g., good().
 135:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 136:/usr/include/c++/11.1.0/bits/basic_ios.h ****       iostate
 137:/usr/include/c++/11.1.0/bits/basic_ios.h ****       rdstate() const
 138:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return _M_streambuf_state; }
 139:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 140:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 141:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  [Re]sets the error state.
 142:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @param  __state  The new state flag(s) to set.
 143:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 144:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 145:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  users will not need to pass an argument.
 146:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 147:/usr/include/c++/11.1.0/bits/basic_ios.h ****       void
 148:/usr/include/c++/11.1.0/bits/basic_ios.h ****       clear(iostate __state = goodbit);
 149:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 150:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 151:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  Sets additional flags in the error state.
 152:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @param  __state  The additional state flag(s) to set.
 153:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 154:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.
 155:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 156:/usr/include/c++/11.1.0/bits/basic_ios.h ****       void
 157:/usr/include/c++/11.1.0/bits/basic_ios.h ****       setstate(iostate __state)
 158:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 159:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 160:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // Flip the internal state on for the proper state bits, then
 161:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // rethrows the propagated exception if bit also set in
 162:/usr/include/c++/11.1.0/bits/basic_ios.h ****       // exceptions().
 163:/usr/include/c++/11.1.0/bits/basic_ios.h ****       void
 164:/usr/include/c++/11.1.0/bits/basic_ios.h ****       _M_setstate(iostate __state)
 165:/usr/include/c++/11.1.0/bits/basic_ios.h ****       {
 166:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	// 27.6.1.2.1 Common requirements.
 167:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	// Turn this on without causing an ios::failure to be thrown.
 168:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	_M_streambuf_state |= __state;
 169:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	if (this->exceptions() & __state)
 170:/usr/include/c++/11.1.0/bits/basic_ios.h **** 	  __throw_exception_again;
 171:/usr/include/c++/11.1.0/bits/basic_ios.h ****       }
 172:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 173:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 174:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  Fast error checking.
 175:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @return  True if no error flags are set.
 176:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 177:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  A wrapper around rdstate.
 178:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 179:/usr/include/c++/11.1.0/bits/basic_ios.h ****       bool
 180:/usr/include/c++/11.1.0/bits/basic_ios.h ****       good() const
 181:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return this->rdstate() == 0; }
 182:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 183:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 184:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  Fast error checking.
 185:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @return  True if the eofbit is set.
 186:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 187:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 188:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 189:/usr/include/c++/11.1.0/bits/basic_ios.h ****       bool
 190:/usr/include/c++/11.1.0/bits/basic_ios.h ****       eof() const
 191:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return (this->rdstate() & eofbit) != 0; }
 192:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 193:/usr/include/c++/11.1.0/bits/basic_ios.h ****       /**
 194:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @brief  Fast error checking.
 195:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  @return  True if either the badbit or the failbit is set.
 196:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *
 197:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  Checking the badbit in fail() is historical practice.
 198:/usr/include/c++/11.1.0/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 199:/usr/include/c++/11.1.0/bits/basic_ios.h ****       */
 200:/usr/include/c++/11.1.0/bits/basic_ios.h ****       bool
 201:/usr/include/c++/11.1.0/bits/basic_ios.h ****       fail() const
 189              		.loc 2 201 7 discriminator 1 view .LVU20
 190              	.LBB44:
 191              	.LBI44:
 137:/usr/include/c++/11.1.0/bits/basic_ios.h ****       { return _M_streambuf_state; }
 192              		.loc 2 137 7 discriminator 1 view .LVU21
 193              	.LBB45:
 194              	# /usr/include/c++/11.1.0/bits/basic_ios.h:138:       { return _M_streambuf_state; }
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 195              		.loc 2 138 16 is_stmt 0 discriminator 1 view .LVU22
 196 01d1 48BA1B3B 		movabsq	$-538054256897803493, %rdx	#, tmp442
 196      B80B8172 
 196      88F8
 197 01db 4831CA   		xorq	%rcx, %rdx	# _13, tmp441
 198 01de 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _256
 199 01e2 4889D0   		movq	%rdx, %rax	# _256, tmp444
 200 01e5 4831D1   		xorq	%rdx, %rcx	# _256, tmp445
 201 01e8 48C1E02F 		salq	$47, %rax	#, tmp444
 202 01ec 4831C1   		xorq	%rax, %rcx	# tmp444, tmp446
 203 01ef 480FAFCB 		imulq	%rbx, %rcx	# tmp547, _260
 204 01f3 4889CA   		movq	%rcx, %rdx	# _260, tmp448
 205 01f6 48C1E22F 		salq	$47, %rdx	#, tmp448
 206 01fa 4831CA   		xorq	%rcx, %rdx	# _260, tmp449
 207 01fd 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _263
 208 0201 4889D0   		movq	%rdx, %rax	# _263, tmp452
 209 0204 83E07F   		andl	$127, %eax	#, tmp452
 210 0207 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _263, __ubsan_vptr_type_cache[_264]
 211 020b 0F85E005 		jne	.L124	#,
 211      0000
 212              	.LVL3:
 213              	.L41:
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 214              		.loc 2 138 16 discriminator 1 view .LVU23
 215 0211 4D85C0   		testq	%r8, %r8	# _251
 216 0214 0F846706 		je	.L42	#,
 216      0000
 217 021a 41F6C007 		testb	$7, %r8b	#, _251
 218 021e 0F855D06 		jne	.L42	#,
 218      0000
 219 0224 498D5020 		leaq	32(%r8), %rdx	#, _270
 220 0228 4983F8E0 		cmpq	$-32, %r8	#, _251
 221 022c 0F834006 		jnb	.L125	#,
 221      0000
 222 0232 4889D0   		movq	%rdx, %rax	# _270, tmp457
 223 0235 48C1E803 		shrq	$3, %rax	#, tmp457
 224 0239 0FB68000 		movzbl	2147450880(%rax), %eax	# *_273, _274
 224      80FF7F
 225 0240 84C0     		testb	%al, %al	# _274
 226 0242 7408     		je	.L45	#,
 227 0244 3C03     		cmpb	$3, %al	#, _274
 228 0246 0F8E1E06 		jle	.L126	#,
 228      0000
 229              	.L45:
 230              	.LVL4:
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 231              		.loc 2 138 16 discriminator 1 view .LVU24
 232              	.LBE45:
 233              	.LBE44:
 234              	.LBB48:
 235              	.LBI48:
 236              		.file 3 "/usr/include/c++/11.1.0/bits/ios_base.h"
   1:/usr/include/c++/11.1.0/bits/ios_base.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/ios_base.h **** 
   3:/usr/include/c++/11.1.0/bits/ios_base.h **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/ios_base.h **** //
   5:/usr/include/c++/11.1.0/bits/ios_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/ios_base.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/ios_base.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/ios_base.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/ios_base.h **** // any later version.
  10:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  11:/usr/include/c++/11.1.0/bits/ios_base.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/ios_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/ios_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/ios_base.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  16:/usr/include/c++/11.1.0/bits/ios_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/ios_base.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/ios_base.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  20:/usr/include/c++/11.1.0/bits/ios_base.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/ios_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/ios_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/ios_base.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  25:/usr/include/c++/11.1.0/bits/ios_base.h **** /** @file bits/ios_base.h
  26:/usr/include/c++/11.1.0/bits/ios_base.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11.1.0/bits/ios_base.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/11.1.0/bits/ios_base.h ****  */
  29:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  30:/usr/include/c++/11.1.0/bits/ios_base.h **** //
  31:/usr/include/c++/11.1.0/bits/ios_base.h **** // ISO C++ 14882: 27.4  Iostreams base classes
  32:/usr/include/c++/11.1.0/bits/ios_base.h **** //
  33:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  34:/usr/include/c++/11.1.0/bits/ios_base.h **** #ifndef _IOS_BASE_H
  35:/usr/include/c++/11.1.0/bits/ios_base.h **** #define _IOS_BASE_H 1
  36:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  37:/usr/include/c++/11.1.0/bits/ios_base.h **** #pragma GCC system_header
  38:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  39:/usr/include/c++/11.1.0/bits/ios_base.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/11.1.0/bits/ios_base.h **** #include <bits/localefwd.h>
  41:/usr/include/c++/11.1.0/bits/ios_base.h **** #include <bits/locale_classes.h>
  42:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  43:/usr/include/c++/11.1.0/bits/ios_base.h **** #if __cplusplus < 201103L
  44:/usr/include/c++/11.1.0/bits/ios_base.h **** # include <stdexcept>
  45:/usr/include/c++/11.1.0/bits/ios_base.h **** #else
  46:/usr/include/c++/11.1.0/bits/ios_base.h **** # include <system_error>
  47:/usr/include/c++/11.1.0/bits/ios_base.h **** #endif
  48:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  49:/usr/include/c++/11.1.0/bits/ios_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  50:/usr/include/c++/11.1.0/bits/ios_base.h **** {
  51:/usr/include/c++/11.1.0/bits/ios_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  52:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  53:/usr/include/c++/11.1.0/bits/ios_base.h ****   // The following definitions of bitmask types are enums, not ints,
  54:/usr/include/c++/11.1.0/bits/ios_base.h ****   // as permitted (but not required) in the standard, in order to provide
  55:/usr/include/c++/11.1.0/bits/ios_base.h ****   // better type safety in iostream calls.  A side effect is that in C++98
  56:/usr/include/c++/11.1.0/bits/ios_base.h ****   // expressions involving them are not compile-time constants.
  57:/usr/include/c++/11.1.0/bits/ios_base.h ****   enum _Ios_Fmtflags 
  58:/usr/include/c++/11.1.0/bits/ios_base.h ****     { 
  59:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_boolalpha 	= 1L << 0,
  60:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_dec 		= 1L << 1,
  61:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_fixed 		= 1L << 2,
  62:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_hex 		= 1L << 3,
  63:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_internal 	= 1L << 4,
  64:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_left 		= 1L << 5,
  65:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_oct 		= 1L << 6,
  66:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_right 		= 1L << 7,
  67:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_scientific 	= 1L << 8,
  68:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_showbase 	= 1L << 9,
  69:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_showpoint 	= 1L << 10,
  70:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_showpos 	= 1L << 11,
  71:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_skipws 	= 1L << 12,
  72:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_unitbuf 	= 1L << 13,
  73:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_uppercase 	= 1L << 14,
  74:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_adjustfield 	= _S_left | _S_right | _S_internal,
  75:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_basefield 	= _S_dec | _S_oct | _S_hex,
  76:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_floatfield 	= _S_scientific | _S_fixed,
  77:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_fmtflags_end = 1L << 16,
  78:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_fmtflags_max = __INT_MAX__,
  79:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_fmtflags_min = ~__INT_MAX__
  80:/usr/include/c++/11.1.0/bits/ios_base.h ****     };
  81:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  82:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  83:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  84:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }
  85:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  86:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  87:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  88:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }
  89:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  90:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  91:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  92:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }
  93:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  94:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Fmtflags
  95:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator~(_Ios_Fmtflags __a)
  96:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Fmtflags(~static_cast<int>(__a)); }
  97:/usr/include/c++/11.1.0/bits/ios_base.h **** 
  98:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Fmtflags&
  99:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 100:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a | __b; }
 101:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 102:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 103:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 104:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a & __b; }
 105:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 106:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Fmtflags&
 107:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
 108:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a ^ __b; }
 109:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 110:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 111:/usr/include/c++/11.1.0/bits/ios_base.h ****   enum _Ios_Openmode 
 112:/usr/include/c++/11.1.0/bits/ios_base.h ****     { 
 113:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_app 		= 1L << 0,
 114:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ate 		= 1L << 1,
 115:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_bin 		= 1L << 2,
 116:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_in 		= 1L << 3,
 117:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_out 		= 1L << 4,
 118:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_trunc 		= 1L << 5,
 119:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_openmode_end = 1L << 16,
 120:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_openmode_max = __INT_MAX__,
 121:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_openmode_min = ~__INT_MAX__
 122:/usr/include/c++/11.1.0/bits/ios_base.h ****     };
 123:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 124:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 125:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator&(_Ios_Openmode __a, _Ios_Openmode __b)
 126:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }
 127:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 128:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 129:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator|(_Ios_Openmode __a, _Ios_Openmode __b)
 130:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
 131:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 132:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 133:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator^(_Ios_Openmode __a, _Ios_Openmode __b)
 134:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }
 135:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 136:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Openmode
 137:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator~(_Ios_Openmode __a)
 138:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Openmode(~static_cast<int>(__a)); }
 139:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 140:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Openmode&
 141:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
 142:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a | __b; }
 143:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 144:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Openmode&
 145:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
 146:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a & __b; }
 147:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 148:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline const _Ios_Openmode&
 149:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
 150:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return __a = __a ^ __b; }
 151:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 152:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 153:/usr/include/c++/11.1.0/bits/ios_base.h ****   enum _Ios_Iostate
 154:/usr/include/c++/11.1.0/bits/ios_base.h ****     { 
 155:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_goodbit 		= 0,
 156:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_badbit 		= 1L << 0,
 157:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_eofbit 		= 1L << 1,
 158:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_failbit		= 1L << 2,
 159:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_iostate_end = 1L << 16,
 160:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_iostate_max = __INT_MAX__,
 161:/usr/include/c++/11.1.0/bits/ios_base.h ****       _S_ios_iostate_min = ~__INT_MAX__
 162:/usr/include/c++/11.1.0/bits/ios_base.h ****     };
 163:/usr/include/c++/11.1.0/bits/ios_base.h **** 
 164:/usr/include/c++/11.1.0/bits/ios_base.h ****   inline _GLIBCXX_CONSTEXPR _Ios_Iostate
 165:/usr/include/c++/11.1.0/bits/ios_base.h ****   operator&(_Ios_Iostate __a, _Ios_Iostate __b)
 237              		.loc 3 165 3 is_stmt 1 discriminator 1 view .LVU25
 238              	.LBB49:
 166:/usr/include/c++/11.1.0/bits/ios_base.h ****   { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }
 239              		.loc 3 166 5 discriminator 1 view .LVU26
 240              		.loc 3 166 5 is_stmt 0 discriminator 1 view .LVU27
 241              	.LBE49:
 242              	.LBE48:
 243              	.LBE43:
 244              	.LBE42:
 245              	# main.cpp:41:     while (cin >> n) {
 246              		.loc 1 41 19 discriminator 1 view .LVU28
 247 024c 41F64020 		testb	$5, 32(%r8)	#, MEM[(const struct ios_base *)_11]._M_streambuf_state
 247      05
 248 0251 0F85F901 		jne	.L127	#,
 248      0000
  42:main.cpp      ****         if (!best) {best = worst = n;}
 249              		.loc 1 42 9 is_stmt 1 view .LVU29
 250              	# main.cpp:42:         if (!best) {best = worst = n;}
 251              		.loc 1 42 34 is_stmt 0 view .LVU30
 252 0257 4889E8   		movq	%rbp, %rax	# tmp542, tmp372
 253 025a 48C1E803 		shrq	$3, %rax	#, tmp372
 254 025e 0FB68000 		movzbl	2147450880(%rax), %eax	# *_167, _134
 254      80FF7F
 255 0265 84C0     		testb	%al, %al	# _134
 256 0267 7408     		je	.L8	#,
 257 0269 3C03     		cmpb	$3, %al	#, _134
 258 026b 0F8E1F06 		jle	.L128	#,
 258      0000
 259              	.L8:
 260 0271 488B4424 		movq	16(%rsp), %rax	# %sfp, tmp347
 260      10
 261 0276 8B40E0   		movl	-32(%rax), %eax	# n, worst
 262              	# main.cpp:42:         if (!best) {best = worst = n;}
 263              		.loc 1 42 9 view .LVU31
 264 0279 4585F6   		testl	%r14d, %r14d	# best
 265 027c 0F84BE01 		je	.L77	#,
 265      0000
  43:main.cpp      ****         if (n > best) {best = n;++amazing;}
 266              		.loc 1 43 9 is_stmt 1 view .LVU32
 267 0282 4139C6   		cmpl	%eax, %r14d	# worst, best
 268 0285 7D12     		jge	.L10	#,
 269              		.loc 1 43 24 discriminator 1 view .LVU33
 270              	.LVL5:
 271              		.loc 1 43 33 discriminator 1 view .LVU34
 272 0287 4489E2   		movl	%r12d, %edx	# amazing, tmp377
 273 028a 83C201   		addl	$1, %edx	#, tmp377
 274 028d 0F801906 		jo	.L129	#,
 274      0000
 275              		.loc 1 43 33 is_stmt 0 discriminator 1 view .LVU35
 276 0293 4189D4   		movl	%edx, %r12d	# tmp377, amazing
 277              	.LVL6:
 278              		.loc 1 43 33 discriminator 1 view .LVU36
 279 0296 4189C6   		movl	%eax, %r14d	# worst, best
 280              	.LVL7:
 281              	.L10:
  44:main.cpp      ****         if (n < worst) {worst = n;++amazing;}
 282              		.loc 1 44 9 is_stmt 1 view .LVU37
 283 0299 3944240C 		cmpl	%eax, 12(%rsp)	# worst, %sfp
 284 029d 0F8E4F07 		jle	.L78	#,
 284      0000
 285              		.loc 1 44 25 discriminator 1 view .LVU38
 286              	.LVL8:
 287              		.loc 1 44 35 discriminator 1 view .LVU39
 288 02a3 4489E2   		movl	%r12d, %edx	# amazing, tmp380
 289 02a6 83C201   		addl	$1, %edx	#, tmp380
 290 02a9 0F80E905 		jo	.L130	#,
 290      0000
 291 02af 4189D4   		movl	%edx, %r12d	# tmp380, amazing
 292              	.LVL9:
 293              	.L9:
 294              	# main.cpp:42:         if (!best) {best = worst = n;}
  42:main.cpp      ****         if (!best) {best = worst = n;}
 295              		.loc 1 42 26 is_stmt 0 view .LVU40
 296 02b2 8944240C 		movl	%eax, 12(%rsp)	# worst, %sfp
 297              	.L7:
 298              	.LVL10:
  41:main.cpp      ****         if (!best) {best = worst = n;}
 299              		.loc 1 41 19 is_stmt 1 view .LVU41
 300 02b6 4C89E8   		movq	%r13, %rax	# tmp539, tmp383
 301 02b9 48C1E803 		shrq	$3, %rax	#, tmp383
 302 02bd 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_180
 302      FF7F00
 303 02c4 0F851F05 		jne	.L131	#,
 303      0000
 304 02ca 48BAA42C 		movabsq	$-8664976708444, %rdx	#, tmp385
 304      24871EF8 
 304      FFFF
 305 02d4 49335500 		xorq	0(%r13), %rdx	# cin._vptr.basic_istream, tmp385
 306 02d8 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _192
 307 02dc 4889D0   		movq	%rdx, %rax	# _192, tmp388
 308 02df 49335500 		xorq	0(%r13), %rdx	# cin._vptr.basic_istream, tmp389
 309 02e3 48C1E02F 		salq	$47, %rax	#, tmp388
 310 02e7 4831D0   		xorq	%rdx, %rax	# tmp389, tmp390
 311 02ea 480FAFC3 		imulq	%rbx, %rax	# tmp547, _124
 312 02ee 4889C2   		movq	%rax, %rdx	# _124, tmp392
 313 02f1 48C1E22F 		salq	$47, %rdx	#, tmp392
 314 02f5 4831C2   		xorq	%rax, %rdx	# _124, tmp393
 315 02f8 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _77
 316 02fc 4889D0   		movq	%rdx, %rax	# _77, tmp396
 317 02ff 83E07F   		andl	$127, %eax	#, tmp396
 318 0302 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _77, __ubsan_vptr_type_cache[_85]
 319 0306 0F85C904 		jne	.L132	#,
 319      0000
 320              	.L16:
 321 030c 4889EE   		movq	%rbp, %rsi	# tmp542,
 322 030f 4C89EF   		movq	%r13, %rdi	# tmp539,
 323 0312 E8000000 		call	_ZNSirsERi@PLT	#
 323      00
 324              	.LVL11:
 325 0317 4885C0   		testq	%rax, %rax	# _33
 326 031a 0F84A604 		je	.L17	#,
 326      0000
 327              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 328              		.loc 1 41 19 is_stmt 0 discriminator 1 view .LVU42
 329 0320 A807     		testb	$7, %al	#, _33
 330 0322 0F859E04 		jne	.L17	#,
 330      0000
 331 0328 4889C2   		movq	%rax, %rdx	# _33, tmp403
 332 032b 48C1EA03 		shrq	$3, %rdx	#, tmp403
 333 032f 80BA0080 		cmpb	$0, 2147450880(%rdx)	#, *_88
 333      FF7F00
 334 0336 0F858204 		jne	.L133	#,
 334      0000
 335 033c 48BAA42C 		movabsq	$-8664976708444, %rdx	#, tmp404
 335      24871EF8 
 335      FFFF
 336 0346 488B08   		movq	(%rax), %rcx	# _33->_vptr.basic_istream, _6
 337 0349 4831CA   		xorq	%rcx, %rdx	# _6, tmp404
 338 034c 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _98
 339 0350 4889D6   		movq	%rdx, %rsi	# _98, tmp407
 340 0353 4831CA   		xorq	%rcx, %rdx	# _6, tmp408
 341 0356 48C1E62F 		salq	$47, %rsi	#, tmp407
 342 035a 4831D6   		xorq	%rdx, %rsi	# tmp408, tmp409
 343 035d 480FAFF3 		imulq	%rbx, %rsi	# tmp547, _131
 344 0361 4889F2   		movq	%rsi, %rdx	# _131, tmp411
 345 0364 48C1E22F 		salq	$47, %rdx	#, tmp411
 346 0368 4831F2   		xorq	%rsi, %rdx	# _131, tmp412
 347 036b 480FAFD3 		imulq	%rbx, %rdx	# tmp547, _209
 348 036f 4889D6   		movq	%rdx, %rsi	# _209, tmp415
 349 0372 83E67F   		andl	$127, %esi	#, tmp415
 350 0375 493914F7 		cmpq	%rdx, (%r15,%rsi,8)	# _209, __ubsan_vptr_type_cache[_210]
 351 0379 0F851704 		jne	.L134	#,
 351      0000
 352              	.L20:
 353 037f 488D51E8 		leaq	-24(%rcx), %rdx	#, _212
 354 0383 4883F918 		cmpq	$24, %rcx	#, _6
 355 0387 0F82FA03 		jb	.L135	#,
 355      0000
 356 038d 4889D6   		movq	%rdx, %rsi	# _212, tmp420
 357 0390 4885D2   		testq	%rdx, %rdx	# _212
 358 0393 0F84E203 		je	.L22	#,
 358      0000
 359 0399 F6C207   		testb	$7, %dl	#, _212
 360 039c 0F85D903 		jne	.L22	#,
 360      0000
 361 03a2 48C1EE03 		shrq	$3, %rsi	#, tmp420
 362 03a6 80BE0080 		cmpb	$0, 2147450880(%rsi)	#, *_219
 362      FF7F00
 363 03ad 0F856B04 		jne	.L136	#,
 363      0000
 364 03b3 4C8B59E8 		movq	-24(%rcx), %r11	# MEM[(long int *)_6 + -24B], _10
 365 03b7 4E8D0418 		leaq	(%rax,%r11), %r8	#, _251
 366 03bb 4D85DB   		testq	%r11, %r11	# _10
 367 03be 0F8964FD 		jns	.L137	#,
 367      FFFF
 368 03c4 4939C0   		cmpq	%rax, %r8	# _33, _251
 369 03c7 0F8664FD 		jbe	.L26	#,
 369      FFFF
 370              	.L27:
 371              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 372              		.loc 1 41 19 view .LVU43
 373 03cd 4C89C2   		movq	%r8, %rdx	# _251,
 374 03d0 4889C6   		movq	%rax, %rsi	# _33,
 375 03d3 488D3D00 		leaq	.Lubsan_data1066(%rip), %rdi	#, tmp421
 375      000000
 376 03da E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 376      00
 377              	.LVL12:
 378 03df 90       		.p2align 4,,10
 379              		.p2align 3
 380              	.L38:
 381              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 382              		.loc 1 41 19 discriminator 1 view .LVU44
 383 03e0 4939C0   		cmpq	%rax, %r8	# _33, _251
 384 03e3 0F86E8FD 		jbe	.L39	#,
 384      FFFF
 385              	.L40:
 386              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 387              		.loc 1 41 19 view .LVU45
 388 03e9 4C89C2   		movq	%r8, %rdx	# _251,
 389 03ec 4889C6   		movq	%rax, %rsi	# _33,
 390 03ef 488D3D00 		leaq	.Lubsan_data1071(%rip), %rdi	#, tmp440
 390      000000
 391 03f6 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 391      00
 392              	.LVL13:
 393 03fb 0F1F4400 		.p2align 4,,10
 393      00
 394              		.p2align 3
 395              	.L30:
 396              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 397              		.loc 1 41 19 discriminator 1 view .LVU46
 398 0400 4939C0   		cmpq	%rax, %r8	# _33, _251
 399 0403 0F864DFD 		jbe	.L31	#,
 399      FFFF
 400              	.L32:
 401              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 402              		.loc 1 41 19 view .LVU47
 403 0409 4C89C2   		movq	%r8, %rdx	# _251,
 404 040c 4889C6   		movq	%rax, %rsi	# _33,
 405 040f 488D3D00 		leaq	.Lubsan_data1068(%rip), %rdi	#, tmp424
 405      000000
 406 0416 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 406      00
 407              	.LVL14:
 408 041b 0F1F4400 		.p2align 4,,10
 408      00
 409              		.p2align 3
 410              	.L33:
 411              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 412              		.loc 1 41 19 discriminator 1 view .LVU48
 413 0420 4939C0   		cmpq	%rax, %r8	# _33, _251
 414 0423 0F863FFD 		jbe	.L34	#,
 414      FFFF
 415              	.L35:
 416              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 417              		.loc 1 41 19 view .LVU49
 418 0429 4C89C2   		movq	%r8, %rdx	# _251,
 419 042c 4889C6   		movq	%rax, %rsi	# _33,
 420 042f 488D3D00 		leaq	.Lubsan_data1069(%rip), %rdi	#, tmp425
 420      000000
 421 0436 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 421      00
 422              	.LVL15:
 423 043b 0F1F4400 		.p2align 4,,10
 423      00
 424              		.p2align 3
 425              	.L77:
 426              	# main.cpp:42:         if (!best) {best = worst = n;}
  42:main.cpp      ****         if (n > best) {best = n;++amazing;}
 427              		.loc 1 42 26 view .LVU50
 428 0440 4189C6   		movl	%eax, %r14d	# worst, best
 429              	.LVL16:
  42:main.cpp      ****         if (n > best) {best = n;++amazing;}
 430              		.loc 1 42 26 view .LVU51
 431 0443 E96AFEFF 		jmp	.L9	#
 431      FF
 432              	.LVL17:
 433 0448 0F1F8400 		.p2align 4,,10
 433      00000000 
 434              		.p2align 3
 435              	.L127:
 436              	# main.cpp:46:     cout << amazing << endl;
  45:main.cpp      ****     }
  46:main.cpp      ****     cout << amazing << endl;
 437              		.loc 1 46 13 view .LVU52
 438 0450 488D2D00 		leaq	_ZSt4cout(%rip), %rbp	#, tmp545
 438      000000
 439 0457 4589E1   		movl	%r12d, %r9d	# amazing, amazing
 440              		.loc 1 46 5 is_stmt 1 view .LVU53
 441              	# main.cpp:46:     cout << amazing << endl;
 442              		.loc 1 46 13 is_stmt 0 view .LVU54
 443 045a 4889E8   		movq	%rbp, %rax	# tmp545, tmp464
 444 045d 48C1E803 		shrq	$3, %rax	#, tmp464
 445 0461 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_281
 445      FF7F00
 446 0468 0F856604 		jne	.L138	#,
 446      0000
 447              	.LVL18:
 448              		.loc 1 46 13 view .LVU55
 449 046e 48BE692D 		movabsq	$-7070675565921424023, %rsi	#, tmp468
 449      38EB08EA 
 449      DF9D
 450 0478 48BA9D3D 		movabsq	$-8638671864419, %rdx	#, tmp467
 450      08A724F8 
 450      FFFF
 451 0482 48331500 		xorq	_ZSt4cout(%rip), %rdx	# cout._vptr.basic_ostream, tmp466
 451      000000
 452 0489 480FAFD6 		imulq	%rsi, %rdx	# tmp468, _284
 453 048d 4889D0   		movq	%rdx, %rax	# _284, tmp469
 454 0490 48331500 		xorq	_ZSt4cout(%rip), %rdx	# cout._vptr.basic_ostream, tmp470
 454      000000
 455 0497 48C1E02F 		salq	$47, %rax	#, tmp469
 456 049b 4831D0   		xorq	%rdx, %rax	# tmp470, tmp471
 457 049e 480FAFC6 		imulq	%rsi, %rax	# tmp468, _288
 458 04a2 4889C2   		movq	%rax, %rdx	# _288, tmp473
 459 04a5 48C1E22F 		salq	$47, %rdx	#, tmp473
 460 04a9 4831C2   		xorq	%rax, %rdx	# _288, tmp474
 461 04ac 480FAFD6 		imulq	%rsi, %rdx	# tmp468, _291
 462 04b0 4889D0   		movq	%rdx, %rax	# _291, tmp477
 463 04b3 83E07F   		andl	$127, %eax	#, tmp477
 464 04b6 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _291, __ubsan_vptr_type_cache[_292]
 465 04ba 0F853B04 		jne	.L139	#,
 465      0000
 466              	.LVL19:
 467              	.L48:
 468              		.loc 1 46 13 view .LVU56
 469 04c0 4889EF   		movq	%rbp, %rdi	# tmp545,
 470 04c3 4489CE   		movl	%r9d, %esi	# amazing,
 471 04c6 E8000000 		call	_ZNSolsEi@PLT	#
 471      00
 472              	.LVL20:
 473 04cb 4889C5   		movq	%rax, %rbp	# tmp551, _42
 474              	# main.cpp:46:     cout << amazing << endl;
 475              		.loc 1 46 24 view .LVU57
 476 04ce 4885C0   		testq	%rax, %rax	# _42
 477 04d1 0F841504 		je	.L49	#,
 477      0000
 478              	# main.cpp:46:     cout << amazing << endl;
 479              		.loc 1 46 24 discriminator 1 view .LVU58
 480 04d7 A807     		testb	$7, %al	#, _42
 481 04d9 0F850D04 		jne	.L49	#,
 481      0000
 482 04df 48C1E803 		shrq	$3, %rax	#, tmp483
 483 04e3 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_299
 483      FF7F00
 484 04ea 0F85F403 		jne	.L140	#,
 484      0000
 485 04f0 48B89D3D 		movabsq	$-8638671864419, %rax	#, tmp485
 485      08A724F8 
 485      FFFF
 486 04fa 4C8B6500 		movq	0(%rbp), %r12	# _42->_vptr.basic_ostream, _16
 487              	.LVL21:
 488              		.loc 1 46 24 discriminator 1 view .LVU59
 489 04fe 48BE692D 		movabsq	$-7070675565921424023, %rsi	#, tmp486
 489      38EB08EA 
 489      DF9D
 490 0508 4C31E0   		xorq	%r12, %rax	# _16, tmp484
 491 050b 480FAFC6 		imulq	%rsi, %rax	# tmp486, _302
 492 050f 4889C2   		movq	%rax, %rdx	# _302, tmp487
 493 0512 4C31E0   		xorq	%r12, %rax	# _16, tmp488
 494 0515 48C1E22F 		salq	$47, %rdx	#, tmp487
 495 0519 4831D0   		xorq	%rdx, %rax	# tmp487, tmp489
 496 051c 480FAFC6 		imulq	%rsi, %rax	# tmp486, _306
 497 0520 4889C2   		movq	%rax, %rdx	# _306, tmp491
 498 0523 48C1E22F 		salq	$47, %rdx	#, tmp491
 499 0527 4831C2   		xorq	%rax, %rdx	# _306, tmp492
 500 052a 480FAFD6 		imulq	%rsi, %rdx	# tmp486, _309
 501 052e 4889D0   		movq	%rdx, %rax	# _309, tmp495
 502 0531 83E07F   		andl	$127, %eax	#, tmp495
 503 0534 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _309, __ubsan_vptr_type_cache[_310]
 504 0538 0F85DB03 		jne	.L141	#,
 504      0000
 505              	.L52:
 506              	.LVL22:
 507              	.LBB54:
 508              	.LBI54:
 509              		.file 4 "/usr/include/c++/11.1.0/ostream"
   1:/usr/include/c++/11.1.0/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/11.1.0/ostream **** 
   3:/usr/include/c++/11.1.0/ostream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/ostream **** //
   5:/usr/include/c++/11.1.0/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/ostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/ostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/ostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/ostream **** // any later version.
  10:/usr/include/c++/11.1.0/ostream **** 
  11:/usr/include/c++/11.1.0/ostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/ostream **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/ostream **** 
  16:/usr/include/c++/11.1.0/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/ostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/ostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/ostream **** 
  20:/usr/include/c++/11.1.0/ostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/ostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/ostream **** 
  25:/usr/include/c++/11.1.0/ostream **** /** @file include/ostream
  26:/usr/include/c++/11.1.0/ostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11.1.0/ostream ****  */
  28:/usr/include/c++/11.1.0/ostream **** 
  29:/usr/include/c++/11.1.0/ostream **** //
  30:/usr/include/c++/11.1.0/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  31:/usr/include/c++/11.1.0/ostream **** //
  32:/usr/include/c++/11.1.0/ostream **** 
  33:/usr/include/c++/11.1.0/ostream **** #ifndef _GLIBCXX_OSTREAM
  34:/usr/include/c++/11.1.0/ostream **** #define _GLIBCXX_OSTREAM 1
  35:/usr/include/c++/11.1.0/ostream **** 
  36:/usr/include/c++/11.1.0/ostream **** #pragma GCC system_header
  37:/usr/include/c++/11.1.0/ostream **** 
  38:/usr/include/c++/11.1.0/ostream **** #include <ios>
  39:/usr/include/c++/11.1.0/ostream **** #include <bits/ostream_insert.h>
  40:/usr/include/c++/11.1.0/ostream **** 
  41:/usr/include/c++/11.1.0/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11.1.0/ostream **** {
  43:/usr/include/c++/11.1.0/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11.1.0/ostream **** 
  45:/usr/include/c++/11.1.0/ostream ****   /**
  46:/usr/include/c++/11.1.0/ostream ****    *  @brief  Template class basic_ostream.
  47:/usr/include/c++/11.1.0/ostream ****    *  @ingroup io
  48:/usr/include/c++/11.1.0/ostream ****    *
  49:/usr/include/c++/11.1.0/ostream ****    *  @tparam _CharT  Type of character stream.
  50:/usr/include/c++/11.1.0/ostream ****    *  @tparam _Traits  Traits for character type, defaults to
  51:/usr/include/c++/11.1.0/ostream ****    *                   char_traits<_CharT>.
  52:/usr/include/c++/11.1.0/ostream ****    *
  53:/usr/include/c++/11.1.0/ostream ****    *  This is the base class for all output streams.  It provides text
  54:/usr/include/c++/11.1.0/ostream ****    *  formatting of all builtin types, and communicates with any class
  55:/usr/include/c++/11.1.0/ostream ****    *  derived from basic_streambuf to do the actual output.
  56:/usr/include/c++/11.1.0/ostream ****   */
  57:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
  58:/usr/include/c++/11.1.0/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  59:/usr/include/c++/11.1.0/ostream ****     {
  60:/usr/include/c++/11.1.0/ostream ****     public:
  61:/usr/include/c++/11.1.0/ostream ****       // Types (inherited from basic_ios):
  62:/usr/include/c++/11.1.0/ostream ****       typedef _CharT			 		char_type;
  63:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::int_type 		int_type;
  64:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  65:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::off_type 		off_type;
  66:/usr/include/c++/11.1.0/ostream ****       typedef _Traits			 		traits_type;
  67:/usr/include/c++/11.1.0/ostream **** 
  68:/usr/include/c++/11.1.0/ostream ****       // Non-standard Types:
  69:/usr/include/c++/11.1.0/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  70:/usr/include/c++/11.1.0/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  71:/usr/include/c++/11.1.0/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  72:/usr/include/c++/11.1.0/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  73:/usr/include/c++/11.1.0/ostream ****       							__num_put_type;
  74:/usr/include/c++/11.1.0/ostream ****       typedef ctype<_CharT>	      			__ctype_type;
  75:/usr/include/c++/11.1.0/ostream **** 
  76:/usr/include/c++/11.1.0/ostream ****       /**
  77:/usr/include/c++/11.1.0/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/11.1.0/ostream ****        *
  79:/usr/include/c++/11.1.0/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/11.1.0/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/11.1.0/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/11.1.0/ostream ****       */
  83:/usr/include/c++/11.1.0/ostream ****       explicit
  84:/usr/include/c++/11.1.0/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/11.1.0/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/11.1.0/ostream **** 
  87:/usr/include/c++/11.1.0/ostream ****       /**
  88:/usr/include/c++/11.1.0/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/11.1.0/ostream ****        *
  90:/usr/include/c++/11.1.0/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/11.1.0/ostream ****       */
  92:/usr/include/c++/11.1.0/ostream ****       virtual
  93:/usr/include/c++/11.1.0/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/11.1.0/ostream **** 
  95:/usr/include/c++/11.1.0/ostream ****       /// Safe prefix/suffix operations.
  96:/usr/include/c++/11.1.0/ostream ****       class sentry;
  97:/usr/include/c++/11.1.0/ostream ****       friend class sentry;
  98:/usr/include/c++/11.1.0/ostream **** 
  99:/usr/include/c++/11.1.0/ostream ****       ///@{
 100:/usr/include/c++/11.1.0/ostream ****       /**
 101:/usr/include/c++/11.1.0/ostream ****        *  @brief  Interface for manipulators.
 102:/usr/include/c++/11.1.0/ostream ****        *
 103:/usr/include/c++/11.1.0/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 104:/usr/include/c++/11.1.0/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 105:/usr/include/c++/11.1.0/ostream ****        *  information, see the iomanip header.
 106:/usr/include/c++/11.1.0/ostream ****       */
 107:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 108:/usr/include/c++/11.1.0/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 510              		.loc 4 108 7 is_stmt 1 discriminator 1 view .LVU60
 511              	.LBB55:
 512              	.LBI55:
 109:/usr/include/c++/11.1.0/ostream ****       {
 110:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 111:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 112:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 113:/usr/include/c++/11.1.0/ostream **** 	return __pf(*this);
 114:/usr/include/c++/11.1.0/ostream ****       }
 115:/usr/include/c++/11.1.0/ostream **** 
 116:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 117:/usr/include/c++/11.1.0/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 118:/usr/include/c++/11.1.0/ostream ****       {
 119:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 121:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 122:/usr/include/c++/11.1.0/ostream **** 	__pf(*this);
 123:/usr/include/c++/11.1.0/ostream **** 	return *this;
 124:/usr/include/c++/11.1.0/ostream ****       }
 125:/usr/include/c++/11.1.0/ostream **** 
 126:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 127:/usr/include/c++/11.1.0/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 128:/usr/include/c++/11.1.0/ostream ****       {
 129:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 131:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 132:/usr/include/c++/11.1.0/ostream **** 	__pf(*this);
 133:/usr/include/c++/11.1.0/ostream **** 	return *this;
 134:/usr/include/c++/11.1.0/ostream ****       }
 135:/usr/include/c++/11.1.0/ostream ****       ///@}
 136:/usr/include/c++/11.1.0/ostream **** 
 137:/usr/include/c++/11.1.0/ostream ****       ///@{
 138:/usr/include/c++/11.1.0/ostream ****       /**
 139:/usr/include/c++/11.1.0/ostream ****        *  @name Inserters
 140:/usr/include/c++/11.1.0/ostream ****        *
 141:/usr/include/c++/11.1.0/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 142:/usr/include/c++/11.1.0/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 143:/usr/include/c++/11.1.0/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 144:/usr/include/c++/11.1.0/ostream ****        *  This can have several effects, concluding with the setting of a
 145:/usr/include/c++/11.1.0/ostream ****        *  status flag; see the sentry documentation for more.
 146:/usr/include/c++/11.1.0/ostream ****        *
 147:/usr/include/c++/11.1.0/ostream ****        *  If the sentry status is good, the function tries to generate
 148:/usr/include/c++/11.1.0/ostream ****        *  whatever data is appropriate for the type of the argument.
 149:/usr/include/c++/11.1.0/ostream ****        *
 150:/usr/include/c++/11.1.0/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 151:/usr/include/c++/11.1.0/ostream ****        *  will be turned on in the stream's error state without causing an
 152:/usr/include/c++/11.1.0/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
 153:/usr/include/c++/11.1.0/ostream ****        *  be rethrown.
 154:/usr/include/c++/11.1.0/ostream ****       */
 155:/usr/include/c++/11.1.0/ostream **** 
 156:/usr/include/c++/11.1.0/ostream ****       ///@{
 157:/usr/include/c++/11.1.0/ostream ****       /**
 158:/usr/include/c++/11.1.0/ostream ****        *  @brief Integer arithmetic inserters
 159:/usr/include/c++/11.1.0/ostream ****        *  @param  __n A variable of builtin integral type.
 160:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 161:/usr/include/c++/11.1.0/ostream ****        *
 162:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 163:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 164:/usr/include/c++/11.1.0/ostream ****       */
 165:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 166:/usr/include/c++/11.1.0/ostream ****       operator<<(long __n)
 167:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 168:/usr/include/c++/11.1.0/ostream **** 
 169:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 170:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned long __n)
 171:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 172:/usr/include/c++/11.1.0/ostream **** 
 173:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 174:/usr/include/c++/11.1.0/ostream ****       operator<<(bool __n)
 175:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 176:/usr/include/c++/11.1.0/ostream **** 
 177:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 178:/usr/include/c++/11.1.0/ostream ****       operator<<(short __n);
 179:/usr/include/c++/11.1.0/ostream **** 
 180:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 181:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned short __n)
 182:/usr/include/c++/11.1.0/ostream ****       {
 183:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 185:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 186:/usr/include/c++/11.1.0/ostream ****       }
 187:/usr/include/c++/11.1.0/ostream **** 
 188:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 189:/usr/include/c++/11.1.0/ostream ****       operator<<(int __n);
 190:/usr/include/c++/11.1.0/ostream **** 
 191:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 192:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned int __n)
 193:/usr/include/c++/11.1.0/ostream ****       {
 194:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 195:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 196:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 197:/usr/include/c++/11.1.0/ostream ****       }
 198:/usr/include/c++/11.1.0/ostream **** 
 199:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 200:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 201:/usr/include/c++/11.1.0/ostream ****       operator<<(long long __n)
 202:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 203:/usr/include/c++/11.1.0/ostream **** 
 204:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 205:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned long long __n)
 206:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 207:/usr/include/c++/11.1.0/ostream **** #endif
 208:/usr/include/c++/11.1.0/ostream ****       ///@}
 209:/usr/include/c++/11.1.0/ostream **** 
 210:/usr/include/c++/11.1.0/ostream ****       ///@{
 211:/usr/include/c++/11.1.0/ostream ****       /**
 212:/usr/include/c++/11.1.0/ostream ****        *  @brief  Floating point arithmetic inserters
 213:/usr/include/c++/11.1.0/ostream ****        *  @param  __f A variable of builtin floating point type.
 214:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 215:/usr/include/c++/11.1.0/ostream ****        *
 216:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 217:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 218:/usr/include/c++/11.1.0/ostream ****       */
 219:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 220:/usr/include/c++/11.1.0/ostream ****       operator<<(double __f)
 221:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__f); }
 222:/usr/include/c++/11.1.0/ostream **** 
 223:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 224:/usr/include/c++/11.1.0/ostream ****       operator<<(float __f)
 225:/usr/include/c++/11.1.0/ostream ****       {
 226:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 227:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 228:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<double>(__f));
 229:/usr/include/c++/11.1.0/ostream ****       }
 230:/usr/include/c++/11.1.0/ostream **** 
 231:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 232:/usr/include/c++/11.1.0/ostream ****       operator<<(long double __f)
 233:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__f); }
 234:/usr/include/c++/11.1.0/ostream ****       ///@}
 235:/usr/include/c++/11.1.0/ostream **** 
 236:/usr/include/c++/11.1.0/ostream ****       /**
 237:/usr/include/c++/11.1.0/ostream ****        *  @brief  Pointer arithmetic inserters
 238:/usr/include/c++/11.1.0/ostream ****        *  @param  __p A variable of pointer type.
 239:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 240:/usr/include/c++/11.1.0/ostream ****        *
 241:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 242:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 243:/usr/include/c++/11.1.0/ostream ****       */
 244:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 245:/usr/include/c++/11.1.0/ostream ****       operator<<(const void* __p)
 246:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__p); }
 247:/usr/include/c++/11.1.0/ostream **** 
 248:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201703L
 249:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 250:/usr/include/c++/11.1.0/ostream ****       operator<<(nullptr_t)
 251:/usr/include/c++/11.1.0/ostream ****       { return *this << "nullptr"; }
 252:/usr/include/c++/11.1.0/ostream **** #endif
 253:/usr/include/c++/11.1.0/ostream **** 
 254:/usr/include/c++/11.1.0/ostream ****       /**
 255:/usr/include/c++/11.1.0/ostream ****        *  @brief  Extracting from another streambuf.
 256:/usr/include/c++/11.1.0/ostream ****        *  @param  __sb  A pointer to a streambuf
 257:/usr/include/c++/11.1.0/ostream ****        *
 258:/usr/include/c++/11.1.0/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 259:/usr/include/c++/11.1.0/ostream ****        *  in that it also constructs a sentry object and has the same error
 260:/usr/include/c++/11.1.0/ostream ****        *  handling behavior.
 261:/usr/include/c++/11.1.0/ostream ****        *
 262:/usr/include/c++/11.1.0/ostream ****        *  If @p __sb is NULL, the stream will set failbit in its error state.
 263:/usr/include/c++/11.1.0/ostream ****        *
 264:/usr/include/c++/11.1.0/ostream ****        *  Characters are extracted from @p __sb and inserted into @c *this
 265:/usr/include/c++/11.1.0/ostream ****        *  until one of the following occurs:
 266:/usr/include/c++/11.1.0/ostream ****        *
 267:/usr/include/c++/11.1.0/ostream ****        *  - the input stream reaches end-of-file,
 268:/usr/include/c++/11.1.0/ostream ****        *  - insertion into the output sequence fails (in this case, the
 269:/usr/include/c++/11.1.0/ostream ****        *    character that would have been inserted is not extracted), or
 270:/usr/include/c++/11.1.0/ostream ****        *  - an exception occurs while getting a character from @p __sb, which
 271:/usr/include/c++/11.1.0/ostream ****        *    sets failbit in the error state
 272:/usr/include/c++/11.1.0/ostream ****        *
 273:/usr/include/c++/11.1.0/ostream ****        *  If the function inserts no characters, failbit is set.
 274:/usr/include/c++/11.1.0/ostream ****       */
 275:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 276:/usr/include/c++/11.1.0/ostream ****       operator<<(__streambuf_type* __sb);
 277:/usr/include/c++/11.1.0/ostream ****       ///@}
 278:/usr/include/c++/11.1.0/ostream **** 
 279:/usr/include/c++/11.1.0/ostream ****       ///@{
 280:/usr/include/c++/11.1.0/ostream ****       /**
 281:/usr/include/c++/11.1.0/ostream ****        *  @name Unformatted Output Functions
 282:/usr/include/c++/11.1.0/ostream ****        *
 283:/usr/include/c++/11.1.0/ostream ****        *  All the unformatted output functions have some common behavior.
 284:/usr/include/c++/11.1.0/ostream ****        *  Each starts by constructing a temporary object of type
 285:/usr/include/c++/11.1.0/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 286:/usr/include/c++/11.1.0/ostream ****        *  with the setting of a status flag; see the sentry documentation
 287:/usr/include/c++/11.1.0/ostream ****        *  for more.
 288:/usr/include/c++/11.1.0/ostream ****        *
 289:/usr/include/c++/11.1.0/ostream ****        *  If the sentry status is good, the function tries to generate
 290:/usr/include/c++/11.1.0/ostream ****        *  whatever data is appropriate for the type of the argument.
 291:/usr/include/c++/11.1.0/ostream ****        *
 292:/usr/include/c++/11.1.0/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 293:/usr/include/c++/11.1.0/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 294:/usr/include/c++/11.1.0/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 295:/usr/include/c++/11.1.0/ostream ****        *  without completing its actions.
 296:/usr/include/c++/11.1.0/ostream ****       */
 297:/usr/include/c++/11.1.0/ostream **** 
 298:/usr/include/c++/11.1.0/ostream ****       /**
 299:/usr/include/c++/11.1.0/ostream ****        *  @brief  Simple insertion.
 300:/usr/include/c++/11.1.0/ostream ****        *  @param  __c  The character to insert.
 301:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 302:/usr/include/c++/11.1.0/ostream ****        *
 303:/usr/include/c++/11.1.0/ostream ****        *  Tries to insert @p __c.
 304:/usr/include/c++/11.1.0/ostream ****        *
 305:/usr/include/c++/11.1.0/ostream ****        *  @note  This function is not overloaded on signed char and
 306:/usr/include/c++/11.1.0/ostream ****        *         unsigned char.
 307:/usr/include/c++/11.1.0/ostream ****       */
 308:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 309:/usr/include/c++/11.1.0/ostream ****       put(char_type __c);
 310:/usr/include/c++/11.1.0/ostream **** 
 311:/usr/include/c++/11.1.0/ostream ****       /**
 312:/usr/include/c++/11.1.0/ostream ****        *  @brief  Core write functionality, without sentry.
 313:/usr/include/c++/11.1.0/ostream ****        *  @param  __s  The array to insert.
 314:/usr/include/c++/11.1.0/ostream ****        *  @param  __n  Maximum number of characters to insert.
 315:/usr/include/c++/11.1.0/ostream ****       */
 316:/usr/include/c++/11.1.0/ostream ****       void
 317:/usr/include/c++/11.1.0/ostream ****       _M_write(const char_type* __s, streamsize __n)
 318:/usr/include/c++/11.1.0/ostream ****       {
 319:/usr/include/c++/11.1.0/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 320:/usr/include/c++/11.1.0/ostream **** 	if (__put != __n)
 321:/usr/include/c++/11.1.0/ostream **** 	  this->setstate(ios_base::badbit);
 322:/usr/include/c++/11.1.0/ostream ****       }
 323:/usr/include/c++/11.1.0/ostream **** 
 324:/usr/include/c++/11.1.0/ostream ****       /**
 325:/usr/include/c++/11.1.0/ostream ****        *  @brief  Character string insertion.
 326:/usr/include/c++/11.1.0/ostream ****        *  @param  __s  The array to insert.
 327:/usr/include/c++/11.1.0/ostream ****        *  @param  __n  Maximum number of characters to insert.
 328:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 329:/usr/include/c++/11.1.0/ostream ****        *
 330:/usr/include/c++/11.1.0/ostream ****        *  Characters are copied from @p __s and inserted into the stream until
 331:/usr/include/c++/11.1.0/ostream ****        *  one of the following happens:
 332:/usr/include/c++/11.1.0/ostream ****        *
 333:/usr/include/c++/11.1.0/ostream ****        *  - @p __n characters are inserted
 334:/usr/include/c++/11.1.0/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 335:/usr/include/c++/11.1.0/ostream ****        *    will be set in the stream's error state)
 336:/usr/include/c++/11.1.0/ostream ****        *
 337:/usr/include/c++/11.1.0/ostream ****        *  @note  This function is not overloaded on signed char and
 338:/usr/include/c++/11.1.0/ostream ****        *         unsigned char.
 339:/usr/include/c++/11.1.0/ostream ****       */
 340:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 341:/usr/include/c++/11.1.0/ostream ****       write(const char_type* __s, streamsize __n);
 342:/usr/include/c++/11.1.0/ostream ****       ///@}
 343:/usr/include/c++/11.1.0/ostream **** 
 344:/usr/include/c++/11.1.0/ostream ****       /**
 345:/usr/include/c++/11.1.0/ostream ****        *  @brief  Synchronizing the stream buffer.
 346:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 347:/usr/include/c++/11.1.0/ostream ****        *
 348:/usr/include/c++/11.1.0/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 349:/usr/include/c++/11.1.0/ostream ****        *
 350:/usr/include/c++/11.1.0/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 351:/usr/include/c++/11.1.0/ostream ****        *  sets badbit.
 352:/usr/include/c++/11.1.0/ostream ****       */
 353:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 354:/usr/include/c++/11.1.0/ostream ****       flush();
 355:/usr/include/c++/11.1.0/ostream **** 
 356:/usr/include/c++/11.1.0/ostream ****       /**
 357:/usr/include/c++/11.1.0/ostream ****        *  @brief  Getting the current write position.
 358:/usr/include/c++/11.1.0/ostream ****        *  @return  A file position object.
 359:/usr/include/c++/11.1.0/ostream ****        *
 360:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 361:/usr/include/c++/11.1.0/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 362:/usr/include/c++/11.1.0/ostream ****       */
 363:/usr/include/c++/11.1.0/ostream ****       pos_type
 364:/usr/include/c++/11.1.0/ostream ****       tellp();
 365:/usr/include/c++/11.1.0/ostream **** 
 366:/usr/include/c++/11.1.0/ostream ****       /**
 367:/usr/include/c++/11.1.0/ostream ****        *  @brief  Changing the current write position.
 368:/usr/include/c++/11.1.0/ostream ****        *  @param  __pos  A file position object.
 369:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 370:/usr/include/c++/11.1.0/ostream ****        *
 371:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 372:/usr/include/c++/11.1.0/ostream ****        *  that function fails, sets failbit.
 373:/usr/include/c++/11.1.0/ostream ****       */
 374:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 375:/usr/include/c++/11.1.0/ostream ****       seekp(pos_type);
 376:/usr/include/c++/11.1.0/ostream **** 
 377:/usr/include/c++/11.1.0/ostream ****       /**
 378:/usr/include/c++/11.1.0/ostream ****        *  @brief  Changing the current write position.
 379:/usr/include/c++/11.1.0/ostream ****        *  @param  __off  A file offset object.
 380:/usr/include/c++/11.1.0/ostream ****        *  @param  __dir  The direction in which to seek.
 381:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 382:/usr/include/c++/11.1.0/ostream ****        *
 383:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 384:/usr/include/c++/11.1.0/ostream ****        *  If that function fails, sets failbit.
 385:/usr/include/c++/11.1.0/ostream ****       */
 386:/usr/include/c++/11.1.0/ostream ****        __ostream_type&
 387:/usr/include/c++/11.1.0/ostream ****       seekp(off_type, ios_base::seekdir);
 388:/usr/include/c++/11.1.0/ostream **** 
 389:/usr/include/c++/11.1.0/ostream ****     protected:
 390:/usr/include/c++/11.1.0/ostream ****       basic_ostream()
 391:/usr/include/c++/11.1.0/ostream ****       { this->init(0); }
 392:/usr/include/c++/11.1.0/ostream **** 
 393:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201103L
 394:/usr/include/c++/11.1.0/ostream ****       // Non-standard constructor that does not call init()
 395:/usr/include/c++/11.1.0/ostream ****       basic_ostream(basic_iostream<_CharT, _Traits>&) { }
 396:/usr/include/c++/11.1.0/ostream **** 
 397:/usr/include/c++/11.1.0/ostream ****       basic_ostream(const basic_ostream&) = delete;
 398:/usr/include/c++/11.1.0/ostream **** 
 399:/usr/include/c++/11.1.0/ostream ****       basic_ostream(basic_ostream&& __rhs)
 400:/usr/include/c++/11.1.0/ostream ****       : __ios_type()
 401:/usr/include/c++/11.1.0/ostream ****       { __ios_type::move(__rhs); }
 402:/usr/include/c++/11.1.0/ostream **** 
 403:/usr/include/c++/11.1.0/ostream ****       // 27.7.3.3 Assign/swap
 404:/usr/include/c++/11.1.0/ostream **** 
 405:/usr/include/c++/11.1.0/ostream ****       basic_ostream& operator=(const basic_ostream&) = delete;
 406:/usr/include/c++/11.1.0/ostream **** 
 407:/usr/include/c++/11.1.0/ostream ****       basic_ostream&
 408:/usr/include/c++/11.1.0/ostream ****       operator=(basic_ostream&& __rhs)
 409:/usr/include/c++/11.1.0/ostream ****       {
 410:/usr/include/c++/11.1.0/ostream **** 	swap(__rhs);
 411:/usr/include/c++/11.1.0/ostream **** 	return *this;
 412:/usr/include/c++/11.1.0/ostream ****       }
 413:/usr/include/c++/11.1.0/ostream **** 
 414:/usr/include/c++/11.1.0/ostream ****       void
 415:/usr/include/c++/11.1.0/ostream ****       swap(basic_ostream& __rhs)
 416:/usr/include/c++/11.1.0/ostream ****       { __ios_type::swap(__rhs); }
 417:/usr/include/c++/11.1.0/ostream **** #endif
 418:/usr/include/c++/11.1.0/ostream **** 
 419:/usr/include/c++/11.1.0/ostream ****       template<typename _ValueT>
 420:/usr/include/c++/11.1.0/ostream **** 	__ostream_type&
 421:/usr/include/c++/11.1.0/ostream **** 	_M_insert(_ValueT __v);
 422:/usr/include/c++/11.1.0/ostream ****     };
 423:/usr/include/c++/11.1.0/ostream **** 
 424:/usr/include/c++/11.1.0/ostream ****   /**
 425:/usr/include/c++/11.1.0/ostream ****    *  @brief  Performs setup work for output streams.
 426:/usr/include/c++/11.1.0/ostream ****    *
 427:/usr/include/c++/11.1.0/ostream ****    *  Objects of this class are created before all of the standard
 428:/usr/include/c++/11.1.0/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 429:/usr/include/c++/11.1.0/ostream ****    *  suffix operations</em>.
 430:/usr/include/c++/11.1.0/ostream ****   */
 431:/usr/include/c++/11.1.0/ostream ****   template <typename _CharT, typename _Traits>
 432:/usr/include/c++/11.1.0/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 433:/usr/include/c++/11.1.0/ostream ****     {
 434:/usr/include/c++/11.1.0/ostream ****       // Data Members.
 435:/usr/include/c++/11.1.0/ostream ****       bool 				_M_ok;
 436:/usr/include/c++/11.1.0/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
 437:/usr/include/c++/11.1.0/ostream **** 
 438:/usr/include/c++/11.1.0/ostream ****     public:
 439:/usr/include/c++/11.1.0/ostream ****       /**
 440:/usr/include/c++/11.1.0/ostream ****        *  @brief  The constructor performs preparatory work.
 441:/usr/include/c++/11.1.0/ostream ****        *  @param  __os  The output stream to guard.
 442:/usr/include/c++/11.1.0/ostream ****        *
 443:/usr/include/c++/11.1.0/ostream ****        *  If the stream state is good (@a __os.good() is true), then if the
 444:/usr/include/c++/11.1.0/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 445:/usr/include/c++/11.1.0/ostream ****        *  is called to synchronize the output sequences.
 446:/usr/include/c++/11.1.0/ostream ****        *
 447:/usr/include/c++/11.1.0/ostream ****        *  If the stream state is still good, then the sentry state becomes
 448:/usr/include/c++/11.1.0/ostream ****        *  true (@a okay).
 449:/usr/include/c++/11.1.0/ostream ****       */
 450:/usr/include/c++/11.1.0/ostream ****       explicit
 451:/usr/include/c++/11.1.0/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 452:/usr/include/c++/11.1.0/ostream **** 
 453:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic push
 454:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 455:/usr/include/c++/11.1.0/ostream ****       /**
 456:/usr/include/c++/11.1.0/ostream ****        *  @brief  Possibly flushes the stream.
 457:/usr/include/c++/11.1.0/ostream ****        *
 458:/usr/include/c++/11.1.0/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 459:/usr/include/c++/11.1.0/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 460:/usr/include/c++/11.1.0/ostream ****        *  @c flush() on the output stream.
 461:/usr/include/c++/11.1.0/ostream ****       */
 462:/usr/include/c++/11.1.0/ostream ****       ~sentry()
 463:/usr/include/c++/11.1.0/ostream ****       {
 464:/usr/include/c++/11.1.0/ostream **** 	// XXX MT
 465:/usr/include/c++/11.1.0/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 466:/usr/include/c++/11.1.0/ostream **** 	  {
 467:/usr/include/c++/11.1.0/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 468:/usr/include/c++/11.1.0/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 469:/usr/include/c++/11.1.0/ostream **** 	      _M_os.setstate(ios_base::badbit);
 470:/usr/include/c++/11.1.0/ostream **** 	  }
 471:/usr/include/c++/11.1.0/ostream ****       }
 472:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic pop
 473:/usr/include/c++/11.1.0/ostream **** 
 474:/usr/include/c++/11.1.0/ostream ****       /**
 475:/usr/include/c++/11.1.0/ostream ****        *  @brief  Quick status checking.
 476:/usr/include/c++/11.1.0/ostream ****        *  @return  The sentry state.
 477:/usr/include/c++/11.1.0/ostream ****        *
 478:/usr/include/c++/11.1.0/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 479:/usr/include/c++/11.1.0/ostream ****        *  return value is that of the sentry state (true == okay).
 480:/usr/include/c++/11.1.0/ostream ****       */
 481:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201103L
 482:/usr/include/c++/11.1.0/ostream ****       explicit
 483:/usr/include/c++/11.1.0/ostream **** #endif
 484:/usr/include/c++/11.1.0/ostream ****       operator bool() const
 485:/usr/include/c++/11.1.0/ostream ****       { return _M_ok; }
 486:/usr/include/c++/11.1.0/ostream ****     };
 487:/usr/include/c++/11.1.0/ostream **** 
 488:/usr/include/c++/11.1.0/ostream ****   ///@{
 489:/usr/include/c++/11.1.0/ostream ****   /**
 490:/usr/include/c++/11.1.0/ostream ****    *  @brief  Character inserters
 491:/usr/include/c++/11.1.0/ostream ****    *  @param  __out  An output stream.
 492:/usr/include/c++/11.1.0/ostream ****    *  @param  __c  A character.
 493:/usr/include/c++/11.1.0/ostream ****    *  @return  out
 494:/usr/include/c++/11.1.0/ostream ****    *
 495:/usr/include/c++/11.1.0/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 496:/usr/include/c++/11.1.0/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 497:/usr/include/c++/11.1.0/ostream ****    *  status, this function inserts a single character and any required
 498:/usr/include/c++/11.1.0/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
 499:/usr/include/c++/11.1.0/ostream ****    *  called.
 500:/usr/include/c++/11.1.0/ostream ****    *
 501:/usr/include/c++/11.1.0/ostream ****    *  If @p __c is of type @c char and the character type of the stream is not
 502:/usr/include/c++/11.1.0/ostream ****    *  @c char, the character is widened before insertion.
 503:/usr/include/c++/11.1.0/ostream ****   */
 504:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 505:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 506:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 507:/usr/include/c++/11.1.0/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 508:/usr/include/c++/11.1.0/ostream **** 
 509:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 510:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 511:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 512:/usr/include/c++/11.1.0/ostream ****     { return (__out << __out.widen(__c)); }
 513:/usr/include/c++/11.1.0/ostream **** 
 514:/usr/include/c++/11.1.0/ostream ****   // Specialization
 515:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 516:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 517:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 518:/usr/include/c++/11.1.0/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 519:/usr/include/c++/11.1.0/ostream **** 
 520:/usr/include/c++/11.1.0/ostream ****   // Signed and unsigned
 521:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 522:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 523:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 524:/usr/include/c++/11.1.0/ostream ****     { return (__out << static_cast<char>(__c)); }
 525:/usr/include/c++/11.1.0/ostream **** 
 526:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 527:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 528:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 529:/usr/include/c++/11.1.0/ostream ****     { return (__out << static_cast<char>(__c)); }
 530:/usr/include/c++/11.1.0/ostream **** 
 531:/usr/include/c++/11.1.0/ostream **** #if __cplusplus > 201703L
 532:/usr/include/c++/11.1.0/ostream ****   // The following deleted overloads prevent formatting character values as
 533:/usr/include/c++/11.1.0/ostream ****   // numeric values.
 534:/usr/include/c++/11.1.0/ostream **** 
 535:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 536:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 537:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 538:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, wchar_t) = delete;
 539:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 540:/usr/include/c++/11.1.0/ostream **** 
 541:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 542:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 543:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 544:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char8_t) = delete;
 545:/usr/include/c++/11.1.0/ostream **** #endif
 546:/usr/include/c++/11.1.0/ostream **** 
 547:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 548:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 549:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char16_t) = delete;
 550:/usr/include/c++/11.1.0/ostream **** 
 551:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 552:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 553:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char32_t) = delete;
 554:/usr/include/c++/11.1.0/ostream **** 
 555:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 556:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 557:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 558:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 559:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char8_t) = delete;
 560:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_CHAR8_T
 561:/usr/include/c++/11.1.0/ostream **** 
 562:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 563:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 564:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char16_t) = delete;
 565:/usr/include/c++/11.1.0/ostream **** 
 566:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 567:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 568:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char32_t) = delete;
 569:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 570:/usr/include/c++/11.1.0/ostream **** #endif // C++20
 571:/usr/include/c++/11.1.0/ostream ****   ///@}
 572:/usr/include/c++/11.1.0/ostream **** 
 573:/usr/include/c++/11.1.0/ostream ****   ///@{
 574:/usr/include/c++/11.1.0/ostream ****   /**
 575:/usr/include/c++/11.1.0/ostream ****    *  @brief  String inserters
 576:/usr/include/c++/11.1.0/ostream ****    *  @param  __out  An output stream.
 577:/usr/include/c++/11.1.0/ostream ****    *  @param  __s  A character string.
 578:/usr/include/c++/11.1.0/ostream ****    *  @return  out
 579:/usr/include/c++/11.1.0/ostream ****    *  @pre  @p __s must be a non-NULL pointer
 580:/usr/include/c++/11.1.0/ostream ****    *
 581:/usr/include/c++/11.1.0/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 582:/usr/include/c++/11.1.0/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 583:/usr/include/c++/11.1.0/ostream ****    *  status, this function inserts @c traits::length(__s) characters starting
 584:/usr/include/c++/11.1.0/ostream ****    *  at @p __s, widened if necessary, followed by any required padding (as
 585:/usr/include/c++/11.1.0/ostream ****    *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
 586:/usr/include/c++/11.1.0/ostream ****   */
 587:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 588:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 589:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 590:/usr/include/c++/11.1.0/ostream ****     {
 591:/usr/include/c++/11.1.0/ostream ****       if (!__s)
 592:/usr/include/c++/11.1.0/ostream **** 	__out.setstate(ios_base::badbit);
 593:/usr/include/c++/11.1.0/ostream ****       else
 594:/usr/include/c++/11.1.0/ostream **** 	__ostream_insert(__out, __s,
 595:/usr/include/c++/11.1.0/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 596:/usr/include/c++/11.1.0/ostream ****       return __out;
 597:/usr/include/c++/11.1.0/ostream ****     }
 598:/usr/include/c++/11.1.0/ostream **** 
 599:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 600:/usr/include/c++/11.1.0/ostream ****     basic_ostream<_CharT, _Traits> &
 601:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 602:/usr/include/c++/11.1.0/ostream **** 
 603:/usr/include/c++/11.1.0/ostream ****   // Partial specializations
 604:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 605:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 606:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 607:/usr/include/c++/11.1.0/ostream ****     {
 608:/usr/include/c++/11.1.0/ostream ****       if (!__s)
 609:/usr/include/c++/11.1.0/ostream **** 	__out.setstate(ios_base::badbit);
 610:/usr/include/c++/11.1.0/ostream ****       else
 611:/usr/include/c++/11.1.0/ostream **** 	__ostream_insert(__out, __s,
 612:/usr/include/c++/11.1.0/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 613:/usr/include/c++/11.1.0/ostream ****       return __out;
 614:/usr/include/c++/11.1.0/ostream ****     }
 615:/usr/include/c++/11.1.0/ostream **** 
 616:/usr/include/c++/11.1.0/ostream ****   // Signed and unsigned
 617:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 618:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 619:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
 620:/usr/include/c++/11.1.0/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 621:/usr/include/c++/11.1.0/ostream **** 
 622:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 623:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits> &
 624:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
 625:/usr/include/c++/11.1.0/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 626:/usr/include/c++/11.1.0/ostream **** 
 627:/usr/include/c++/11.1.0/ostream **** #if __cplusplus > 201703L
 628:/usr/include/c++/11.1.0/ostream ****    // The following deleted overloads prevent formatting strings as
 629:/usr/include/c++/11.1.0/ostream ****    // pointer values.
 630:/usr/include/c++/11.1.0/ostream **** 
 631:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 632:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 633:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 634:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, const wchar_t*) = delete;
 635:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 636:/usr/include/c++/11.1.0/ostream **** 
 637:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 638:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 639:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 640:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, const char8_t*) = delete;
 641:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_CHAR8_T
 642:/usr/include/c++/11.1.0/ostream **** 
 643:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 644:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 645:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, const char16_t*) = delete;
 646:/usr/include/c++/11.1.0/ostream **** 
 647:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 648:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 649:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, const char32_t*) = delete;
 650:/usr/include/c++/11.1.0/ostream **** 
 651:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 652:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 653:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 654:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 655:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, const char8_t*) = delete;
 656:/usr/include/c++/11.1.0/ostream **** #endif
 657:/usr/include/c++/11.1.0/ostream **** 
 658:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 659:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 660:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, const char16_t*) = delete;
 661:/usr/include/c++/11.1.0/ostream **** 
 662:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 663:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 664:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, const char32_t*) = delete;
 665:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 666:/usr/include/c++/11.1.0/ostream **** #endif // C++20
 667:/usr/include/c++/11.1.0/ostream ****   ///@}
 668:/usr/include/c++/11.1.0/ostream **** 
 669:/usr/include/c++/11.1.0/ostream ****   // Standard basic_ostream manipulators
 670:/usr/include/c++/11.1.0/ostream **** 
 671:/usr/include/c++/11.1.0/ostream ****   /**
 672:/usr/include/c++/11.1.0/ostream ****    *  @brief  Write a newline and flush the stream.
 673:/usr/include/c++/11.1.0/ostream ****    *
 674:/usr/include/c++/11.1.0/ostream ****    *  This manipulator is often mistakenly used when a simple newline is
 675:/usr/include/c++/11.1.0/ostream ****    *  desired, leading to poor buffering performance.  See
 676:/usr/include/c++/11.1.0/ostream ****    *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
 677:/usr/include/c++/11.1.0/ostream ****    *  for more on this subject.
 678:/usr/include/c++/11.1.0/ostream ****   */
 679:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 680:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 681:/usr/include/c++/11.1.0/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 513              		.loc 4 681 5 discriminator 1 view .LVU61
 514              	.LBB56:
 515              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream ****     { return flush(__os.put(__os.widen('\n'))); }
 516              		.loc 4 682 39 is_stmt 0 discriminator 1 view .LVU62
 517 053e 498D5424 		leaq	-24(%r12), %rdx	#, _312
 517      E8
 518 0543 4983FC18 		cmpq	$24, %r12	#, _16
 519 0547 0F829604 		jb	.L142	#,
 519      0000
 520 054d 4885D2   		testq	%rdx, %rdx	# _312
 521 0550 0F847E04 		je	.L54	#,
 521      0000
 522 0556 F6C207   		testb	$7, %dl	#, _312
 523 0559 0F857504 		jne	.L54	#,
 523      0000
 524 055f 4889D0   		movq	%rdx, %rax	# _312, tmp500
 525 0562 48C1E803 		shrq	$3, %rax	#, tmp500
 526 0566 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_319
 526      FF7F00
 527 056d 0F851704 		jne	.L143	#,
 527      0000
 528 0573 498B5C24 		movq	-24(%r12), %rbx	# MEM[(long int *)_16 + -24B], _139
 528      E8
 529 0578 4C8D641D 		leaq	0(%rbp,%rbx), %r12	#, _351
 529      00
 530 057d 4885DB   		testq	%rbx, %rbx	# _139
 531 0580 0F88DA01 		js	.L57	#,
 531      0000
 532              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 533              		.loc 4 682 39 view .LVU63
 534 0586 4939EC   		cmpq	%rbp, %r12	# _42, _351
 535 0589 0F82DA01 		jb	.L59	#,
 535      0000
 536              	.L58:
 537              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 538              		.loc 4 682 39 discriminator 1 view .LVU64
 539 058f 4D85E4   		testq	%r12, %r12	# _351
 540 0592 0F842D04 		je	.L60	#,
 540      0000
 541 0598 41F6C407 		testb	$7, %r12b	#, _351
 542 059c 0F852304 		jne	.L60	#,
 542      0000
 543 05a2 4885DB   		testq	%rbx, %rbx	# _139
 544 05a5 0F889501 		js	.L62	#,
 544      0000
 545              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 546              		.loc 4 682 39 view .LVU65
 547 05ab 4939EC   		cmpq	%rbp, %r12	# _42, _351
 548 05ae 0F829501 		jb	.L64	#,
 548      0000
 549              	.L63:
 550              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 551              		.loc 4 682 39 discriminator 1 view .LVU66
 552 05b4 4885DB   		testq	%rbx, %rbx	# _139
 553 05b7 0F886301 		js	.L65	#,
 553      0000
 554              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 555              		.loc 4 682 39 view .LVU67
 556 05bd 4939EC   		cmpq	%rbp, %r12	# _42, _351
 557 05c0 0F826301 		jb	.L67	#,
 557      0000
 558              	.L66:
 559              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 560              		.loc 4 682 39 discriminator 1 view .LVU68
 561 05c6 4C89E0   		movq	%r12, %rax	# _351, tmp506
 562 05c9 48C1E803 		shrq	$3, %rax	#, tmp506
 563 05cd 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_338
 563      FF7F00
 564 05d4 0F850203 		jne	.L144	#,
 564      0000
 565 05da 48BE692D 		movabsq	$-7070675565921424023, %rsi	#, tmp509
 565      38EB08EA 
 565      DF9D
 566 05e4 48BAA56E 		movabsq	$8135312701535973029, %rdx	#, tmp508
 566      C69FCC6F 
 566      E670
 567 05ee 49331424 		xorq	(%r12), %rdx	# _140->_vptr.ios_base, tmp507
 568 05f2 480FAFD6 		imulq	%rsi, %rdx	# tmp509, _341
 569 05f6 4889D0   		movq	%rdx, %rax	# _341, tmp510
 570 05f9 49331424 		xorq	(%r12), %rdx	# _140->_vptr.ios_base, tmp511
 571 05fd 48C1E02F 		salq	$47, %rax	#, tmp510
 572 0601 4831D0   		xorq	%rdx, %rax	# tmp511, tmp512
 573 0604 480FAFC6 		imulq	%rsi, %rax	# tmp509, _345
 574 0608 4889C2   		movq	%rax, %rdx	# _345, tmp514
 575 060b 48C1E22F 		salq	$47, %rdx	#, tmp514
 576 060f 4831C2   		xorq	%rax, %rdx	# _345, tmp515
 577 0612 480FAFD6 		imulq	%rsi, %rdx	# tmp509, _348
 578 0616 4889D0   		movq	%rdx, %rax	# _348, tmp518
 579 0619 83E07F   		andl	$127, %eax	#, tmp518
 580 061c 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _348, __ubsan_vptr_type_cache[_349]
 581 0620 0F859A02 		jne	.L145	#,
 581      0000
 582              	.L69:
 583 0626 4885DB   		testq	%rbx, %rbx	# _139
 584 0629 0F88D100 		js	.L70	#,
 584      0000
 585              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 586              		.loc 4 682 39 view .LVU69
 587 062f 4939EC   		cmpq	%rbp, %r12	# _42, _351
 588 0632 0F82D100 		jb	.L72	#,
 588      0000
 589              	.L71:
 590              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 591              		.loc 4 682 39 discriminator 1 view .LVU70
 592 0638 BE0A0000 		movl	$10, %esi	#,
 592      00
 593 063d 4C89E7   		movq	%r12, %rdi	# _351,
 594 0640 E8000000 		call	_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc@PLT	#
 594      00
 595              	.LVL23:
 596              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 597              		.loc 4 682 19 discriminator 1 view .LVU71
 598 0645 4889EF   		movq	%rbp, %rdi	# _42,
 599 0648 0FBEF0   		movsbl	%al, %esi	# tmp552, _148
 600 064b E8000000 		call	_ZNSo3putEc@PLT	#
 600      00
 601              	.LVL24:
 602 0650 4889C5   		movq	%rax, %rbp	# tmp553, _150
 603              	.LVL25:
 604              	.LBB57:
 605              	.LBI57:
 683:/usr/include/c++/11.1.0/ostream **** 
 684:/usr/include/c++/11.1.0/ostream ****   /**
 685:/usr/include/c++/11.1.0/ostream ****    *  @brief  Write a null character into the output sequence.
 686:/usr/include/c++/11.1.0/ostream ****    *
 687:/usr/include/c++/11.1.0/ostream ****    *  <em>Null character</em> is @c CharT() by definition.  For CharT
 688:/usr/include/c++/11.1.0/ostream ****    *  of @c char, this correctly writes the ASCII @c NUL character
 689:/usr/include/c++/11.1.0/ostream ****    *  string terminator.
 690:/usr/include/c++/11.1.0/ostream ****   */
 691:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 692:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 693:/usr/include/c++/11.1.0/ostream ****     ends(basic_ostream<_CharT, _Traits>& __os)
 694:/usr/include/c++/11.1.0/ostream ****     { return __os.put(_CharT()); }
 695:/usr/include/c++/11.1.0/ostream **** 
 696:/usr/include/c++/11.1.0/ostream ****   /**
 697:/usr/include/c++/11.1.0/ostream ****    *  @brief  Flushes the output stream.
 698:/usr/include/c++/11.1.0/ostream ****    *
 699:/usr/include/c++/11.1.0/ostream ****    *  This manipulator simply calls the stream's @c flush() member function.
 700:/usr/include/c++/11.1.0/ostream ****   */
 701:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 702:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 703:/usr/include/c++/11.1.0/ostream ****     flush(basic_ostream<_CharT, _Traits>& __os)
 606              		.loc 4 703 5 is_stmt 1 discriminator 1 view .LVU72
 607              	.LBB58:
 608              	# /usr/include/c++/11.1.0/ostream:704:     { return __os.flush(); }
 704:/usr/include/c++/11.1.0/ostream ****     { return __os.flush(); }
 609              		.loc 4 704 24 is_stmt 0 discriminator 1 view .LVU73
 610 0653 4885C0   		testq	%rax, %rax	# _150
 611 0656 0F845203 		je	.L73	#,
 611      0000
 612              	# /usr/include/c++/11.1.0/ostream:704:     { return __os.flush(); }
 613              		.loc 4 704 24 view .LVU74
 614 065c A807     		testb	$7, %al	#, _150
 615 065e 0F854A03 		jne	.L73	#,
 615      0000
 616 0664 48C1E803 		shrq	$3, %rax	#, tmp524
 617              	.LVL26:
 618              		.loc 4 704 24 view .LVU75
 619 0668 80B80080 		cmpb	$0, 2147450880(%rax)	#, *_360
 619      FF7F00
 620 066f 0F853103 		jne	.L146	#,
 620      0000
 621 0675 48BE692D 		movabsq	$-7070675565921424023, %rsi	#, tmp527
 621      38EB08EA 
 621      DF9D
 622 067f 48BA9D3D 		movabsq	$-8638671864419, %rdx	#, tmp526
 622      08A724F8 
 622      FFFF
 623 0689 48335500 		xorq	0(%rbp), %rdx	# _150->_vptr.basic_ostream, tmp525
 624 068d 480FAFD6 		imulq	%rsi, %rdx	# tmp527, _363
 625 0691 4889D0   		movq	%rdx, %rax	# _363, tmp528
 626 0694 48335500 		xorq	0(%rbp), %rdx	# _150->_vptr.basic_ostream, tmp529
 627 0698 48C1E02F 		salq	$47, %rax	#, tmp528
 628 069c 4831D0   		xorq	%rdx, %rax	# tmp529, tmp530
 629 069f 480FAFC6 		imulq	%rsi, %rax	# tmp527, _367
 630 06a3 4889C2   		movq	%rax, %rdx	# _367, tmp532
 631 06a6 48C1E22F 		salq	$47, %rdx	#, tmp532
 632 06aa 4831C2   		xorq	%rax, %rdx	# _367, tmp533
 633 06ad 480FAFD6 		imulq	%rsi, %rdx	# tmp527, _370
 634 06b1 4889D0   		movq	%rdx, %rax	# _370, tmp536
 635 06b4 83E07F   		andl	$127, %eax	#, tmp536
 636 06b7 493914C7 		cmpq	%rdx, (%r15,%rax,8)	# _370, __ubsan_vptr_type_cache[_371]
 637 06bb 0F85B502 		jne	.L147	#,
 637      0000
 638              	.L76:
 639 06c1 4889EF   		movq	%rbp, %rdi	# _150,
 640 06c4 E8000000 		call	_ZNSo5flushEv@PLT	#
 640      00
 641              	.LVL27:
 642              		.loc 4 704 24 view .LVU76
 643              	.LBE58:
 644              	.LBE57:
 645              	.LBE56:
 646              	.LBE55:
 647              	.LBE54:
 648              	# main.cpp:34: int main() {
  34:main.cpp      ****     // SPEED;
 649              		.loc 1 34 12 view .LVU77
 650 06c9 488B7C24 		movq	24(%rsp), %rdi	# %sfp, tmp345
 650      18
 651 06ce 48397C24 		cmpq	%rdi, 32(%rsp)	# tmp345, %sfp
 651      20
 652 06d3 0F857102 		jne	.L148	#,
 652      0000
 653 06d9 488B4424 		movq	40(%rsp), %rax	# %sfp, tmp350
 653      28
 654 06de 48C78000 		movq	$0, 2147450880(%rax)	#,
 654      80FF7F00 
 654      000000
 655              	.L3:
 656              	# main.cpp:47: }
  47:main.cpp      **** }
 657              		.loc 1 47 1 view .LVU78
 658 06e9 4881C498 		addq	$152, %rsp	#,
 658      000000
 659              		.cfi_remember_state
 660              		.cfi_def_cfa_offset 56
 661 06f0 31C0     		xorl	%eax, %eax	#
 662 06f2 5B       		popq	%rbx	#
 663              		.cfi_def_cfa_offset 48
 664 06f3 5D       		popq	%rbp	#
 665              		.cfi_def_cfa_offset 40
 666 06f4 415C     		popq	%r12	#
 667              		.cfi_def_cfa_offset 32
 668 06f6 415D     		popq	%r13	#
 669              		.cfi_def_cfa_offset 24
 670 06f8 415E     		popq	%r14	#
 671              		.cfi_def_cfa_offset 16
 672              	.LVL28:
 673              		.loc 1 47 1 view .LVU79
 674 06fa 415F     		popq	%r15	#
 675              		.cfi_def_cfa_offset 8
 676 06fc C3       		ret	
 677              	.LVL29:
 678 06fd 0F1F00   		.p2align 4,,10
 679              		.p2align 3
 680              	.L70:
 681              		.cfi_restore_state
 682              	.LBB75:
 683              	.LBB69:
 684              	.LBB63:
 685              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 686              		.loc 4 682 39 discriminator 1 view .LVU80
 687 0700 4939EC   		cmpq	%rbp, %r12	# _42, _351
 688 0703 0F862FFF 		jbe	.L71	#,
 688      FFFF
 689              	.L72:
 690              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 691              		.loc 4 682 39 view .LVU81
 692 0709 4C89E2   		movq	%r12, %rdx	# _351,
 693 070c 4889EE   		movq	%rbp, %rsi	# _42,
 694 070f 488D3D00 		leaq	.Lubsan_data1085(%rip), %rdi	#, tmp520
 694      000000
 695 0716 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 695      00
 696              	.LVL30:
 697 071b 0F1F4400 		.p2align 4,,10
 697      00
 698              		.p2align 3
 699              	.L65:
 700              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 701              		.loc 4 682 39 discriminator 1 view .LVU82
 702 0720 4939EC   		cmpq	%rbp, %r12	# _42, _351
 703 0723 0F869DFE 		jbe	.L66	#,
 703      FFFF
 704              	.L67:
 705              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 706              		.loc 4 682 39 view .LVU83
 707 0729 4C89E2   		movq	%r12, %rdx	# _351,
 708 072c 4889EE   		movq	%rbp, %rsi	# _42,
 709 072f 488D3D00 		leaq	.Lubsan_data1083(%rip), %rdi	#, tmp505
 709      000000
 710 0736 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 710      00
 711              	.LVL31:
 712 073b 0F1F4400 		.p2align 4,,10
 712      00
 713              		.p2align 3
 714              	.L62:
 715              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 716              		.loc 4 682 39 discriminator 1 view .LVU84
 717 0740 4939EC   		cmpq	%rbp, %r12	# _42, _351
 718 0743 0F866BFE 		jbe	.L63	#,
 718      FFFF
 719              	.L64:
 720              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 721              		.loc 4 682 39 view .LVU85
 722 0749 4C89E2   		movq	%r12, %rdx	# _351,
 723 074c 4889EE   		movq	%rbp, %rsi	# _42,
 724 074f 488D3D00 		leaq	.Lubsan_data1082(%rip), %rdi	#, tmp504
 724      000000
 725 0756 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 725      00
 726              	.LVL32:
 727 075b 0F1F4400 		.p2align 4,,10
 727      00
 728              		.p2align 3
 729              	.L57:
 730              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 731              		.loc 4 682 39 discriminator 1 view .LVU86
 732 0760 4939EC   		cmpq	%rbp, %r12	# _42, _351
 733 0763 0F8626FE 		jbe	.L58	#,
 733      FFFF
 734              	.L59:
 735              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 736              		.loc 4 682 39 view .LVU87
 737 0769 4C89E2   		movq	%r12, %rdx	# _351,
 738 076c 4889EE   		movq	%rbp, %rsi	# _42,
 739 076f 488D3D00 		leaq	.Lubsan_data1080(%rip), %rdi	#, tmp501
 739      000000
 740 0776 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 740      00
 741              	.LVL33:
 742              	.L22:
 682:/usr/include/c++/11.1.0/ostream **** 
 743              		.loc 4 682 39 view .LVU88
 744              	.LBE63:
 745              	.LBE69:
 746              	.LBE75:
 747              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 748              		.loc 1 41 19 view .LVU89
 749 077b 488D3D00 		leaq	.Lubsan_data1065(%rip), %rdi	#, tmp419
 749      000000
 750 0782 E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 750      00
 751              	.LVL34:
 752              	.L135:
 753 0787 4889CE   		movq	%rcx, %rsi	# _6,
 754 078a 488D3D00 		leaq	.Lubsan_data1064(%rip), %rdi	#, tmp417
 754      000000
 755 0791 E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 755      00
 756              	.LVL35:
 757              	.L134:
 758 0796 4889C6   		movq	%rax, %rsi	# _33,
 759 0799 488D3D00 		leaq	.Lubsan_data1063(%rip), %rdi	#,
 759      000000
 760 07a0 48894C24 		movq	%rcx, 56(%rsp)	# _6, %sfp
 760      38
 761 07a5 48894424 		movq	%rax, 48(%rsp)	# _33, %sfp
 761      30
 762 07aa E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 762      00
 763              	.LVL36:
 764 07af 488B4C24 		movq	56(%rsp), %rcx	# %sfp, _6
 764      38
 765 07b4 488B4424 		movq	48(%rsp), %rax	# %sfp, _33
 765      30
 766 07b9 E9C1FBFF 		jmp	.L20	#
 766      FF
 767              	.L133:
 768 07be 4889C7   		movq	%rax, %rdi	# _33,
 769 07c1 E8000000 		call	__asan_report_load8@PLT	#
 769      00
 770              	.LVL37:
 771              	.L17:
 772 07c6 4889C6   		movq	%rax, %rsi	# _33,
 773 07c9 488D3D00 		leaq	.Lubsan_data1062(%rip), %rdi	#, tmp402
 773      000000
 774 07d0 E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 774      00
 775              	.LVL38:
 776              	.L132:
 777 07d5 4C89EE   		movq	%r13, %rsi	# tmp539,
 778 07d8 488D3D00 		leaq	.Lubsan_data1061(%rip), %rdi	#,
 778      000000
 779 07df E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 779      00
 780              	.LVL39:
 781 07e4 E923FBFF 		jmp	.L16	#
 781      FF
 782              	.L131:
 783 07e9 4C89EF   		movq	%r13, %rdi	# tmp539,
 784 07ec E8000000 		call	__asan_report_load8@PLT	#
 784      00
 785              	.LVL40:
 786              	.L124:
 787              	.LBB76:
 788              	.LBB52:
 789              	.LBB50:
 790              	.LBB46:
 791              	# /usr/include/c++/11.1.0/bits/basic_ios.h:138:       { return _M_streambuf_state; }
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 792              		.loc 2 138 16 view .LVU90
 793 07f1 4C89C6   		movq	%r8, %rsi	# _251,
 794 07f4 488D3D00 		leaq	.Lubsan_data1072(%rip), %rdi	#, tmp453
 794      000000
 795 07fb 4C894424 		movq	%r8, 48(%rsp)	# _251, %sfp
 795      30
 796 0800 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 796      00
 797              	.LVL41:
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 798              		.loc 2 138 16 view .LVU91
 799 0805 4C8B4424 		movq	48(%rsp), %r8	# %sfp, _251
 799      30
 800 080a E902FAFF 		jmp	.L41	#
 800      FF
 801              	.LVL42:
 802              	.L28:
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 803              		.loc 2 138 16 view .LVU92
 804              	.LBE46:
 805              	.LBE50:
 806              	.LBE52:
 807              	.LBE76:
 808              	# main.cpp:41:     while (cin >> n) {
  41:main.cpp      ****         if (!best) {best = worst = n;}
 809              		.loc 1 41 19 view .LVU93
 810 080f 4C89C6   		movq	%r8, %rsi	# _251,
 811 0812 488D3D00 		leaq	.Lubsan_data1067(%rip), %rdi	#, tmp423
 811      000000
 812 0819 E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 812      00
 813              	.LVL43:
 814              	.L136:
 815 081e 4889D7   		movq	%rdx, %rdi	# _212,
 816 0821 E8000000 		call	__asan_report_load8@PLT	#
 816      00
 817              	.LVL44:
 818              	.L123:
 819 0826 4C89C6   		movq	%r8, %rsi	# _251,
 820 0829 488D3D00 		leaq	.Lubsan_data1070(%rip), %rdi	#, tmp439
 820      000000
 821 0830 48894424 		movq	%rax, 72(%rsp)	# _33, %sfp
 821      48
 822 0835 48894C24 		movq	%rcx, 64(%rsp)	# _13, %sfp
 822      40
 823 083a 4C895C24 		movq	%r11, 56(%rsp)	# _10, %sfp
 823      38
 824 083f 4C894424 		movq	%r8, 48(%rsp)	# _251, %sfp
 824      30
 825 0844 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 825      00
 826              	.LVL45:
 827 0849 488B4424 		movq	72(%rsp), %rax	# %sfp, _33
 827      48
 828 084e 488B4C24 		movq	64(%rsp), %rcx	# %sfp, _13
 828      40
 829 0853 4C8B5C24 		movq	56(%rsp), %r11	# %sfp, _10
 829      38
 830 0858 4C8B4424 		movq	48(%rsp), %r8	# %sfp, _251
 830      30
 831 085d E95DF9FF 		jmp	.L37	#
 831      FF
 832              	.L122:
 833 0862 4C89C7   		movq	%r8, %rdi	# _251,
 834 0865 E8000000 		call	__asan_report_load8@PLT	#
 834      00
 835              	.LVL46:
 836              	.L126:
 837              	.LBB77:
 838              	.LBB53:
 839              	.LBB51:
 840              	.LBB47:
 841              	# /usr/include/c++/11.1.0/bits/basic_ios.h:138:       { return _M_streambuf_state; }
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 842              		.loc 2 138 16 view .LVU94
 843 086a 4889D7   		movq	%rdx, %rdi	# _270,
 844 086d E8000000 		call	__asan_report_load4@PLT	#
 844      00
 845              	.LVL47:
 846              	.L125:
 847 0872 4C89C6   		movq	%r8, %rsi	# _251,
 848 0875 488D3D00 		leaq	.Lubsan_data1074(%rip), %rdi	#, tmp456
 848      000000
 849 087c E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 849      00
 850              	.LVL48:
 851              	.L42:
 852 0881 4C89C6   		movq	%r8, %rsi	# _251,
 853 0884 488D3D00 		leaq	.Lubsan_data1073(%rip), %rdi	#, tmp455
 853      000000
 854 088b E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 854      00
 855              	.LVL49:
 856              	.L128:
 138:/usr/include/c++/11.1.0/bits/basic_ios.h **** 
 857              		.loc 2 138 16 view .LVU95
 858              	.LBE47:
 859              	.LBE51:
 860              	.LBE53:
 861              	.LBE77:
 862              	# main.cpp:42:         if (!best) {best = worst = n;}
  42:main.cpp      ****         if (n > best) {best = n;++amazing;}
 863              		.loc 1 42 34 view .LVU96
 864 0890 4889EF   		movq	%rbp, %rdi	# tmp542,
 865 0893 E8000000 		call	__asan_report_load4@PLT	#
 865      00
 866              	.LVL50:
 867              	.L130:
 868              	# main.cpp:44:         if (n < worst) {worst = n;++amazing;}
  44:main.cpp      ****     }
 869              		.loc 1 44 35 discriminator 1 view .LVU97
 870 0898 4963F4   		movslq	%r12d, %rsi	# amazing,
 871 089b BA010000 		movl	$1, %edx	#,
 871      00
 872 08a0 488D3D00 		leaq	.Lubsan_data1089(%rip), %rdi	#, tmp382
 872      000000
 873 08a7 E8000000 		call	__ubsan_handle_add_overflow_abort@PLT	#
 873      00
 874              	.LVL51:
 875              	.L129:
 876              	# main.cpp:43:         if (n > best) {best = n;++amazing;}
  43:main.cpp      ****         if (n < worst) {worst = n;++amazing;}
 877              		.loc 1 43 33 discriminator 1 view .LVU98
 878 08ac 4963F4   		movslq	%r12d, %rsi	# amazing,
 879 08af BA010000 		movl	$1, %edx	#,
 879      00
 880 08b4 488D3D00 		leaq	.Lubsan_data1088(%rip), %rdi	#, tmp379
 880      000000
 881 08bb E8000000 		call	__ubsan_handle_add_overflow_abort@PLT	#
 881      00
 882              	.LVL52:
 883              	.L145:
 884              	.LBB78:
 885              	.LBB70:
 886              	.LBB64:
 887              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 888              		.loc 4 682 39 view .LVU99
 889 08c0 4C89E6   		movq	%r12, %rsi	# _351,
 890 08c3 488D3D00 		leaq	.Lubsan_data1084(%rip), %rdi	#, tmp519
 890      000000
 891 08ca E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 891      00
 892              	.LVL53:
 893 08cf E952FDFF 		jmp	.L69	#
 893      FF
 894              	.LVL54:
 895              	.L138:
 682:/usr/include/c++/11.1.0/ostream **** 
 896              		.loc 4 682 39 view .LVU100
 897              	.LBE64:
 898              	.LBE70:
 899              	.LBE78:
 900              	# main.cpp:46:     cout << amazing << endl;
  46:main.cpp      **** }
 901              		.loc 1 46 13 view .LVU101
 902 08d4 4889EF   		movq	%rbp, %rdi	# tmp545,
 903 08d7 E8000000 		call	__asan_report_load8@PLT	#
 903      00
 904              	.LVL55:
 905              	.L144:
 906              	.LBB79:
 907              	.LBB71:
 908              	.LBB65:
 909              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 910              		.loc 4 682 39 view .LVU102
 911 08dc 4C89E7   		movq	%r12, %rdi	# _351,
 912 08df E8000000 		call	__asan_report_load8@PLT	#
 912      00
 913              	.LVL56:
 914              	.L140:
 682:/usr/include/c++/11.1.0/ostream **** 
 915              		.loc 4 682 39 view .LVU103
 916              	.LBE65:
 917              	.LBE71:
 918              	.LBE79:
 919              	# main.cpp:46:     cout << amazing << endl;
  46:main.cpp      **** }
 920              		.loc 1 46 24 view .LVU104
 921 08e4 4889EF   		movq	%rbp, %rdi	# _42,
 922 08e7 E8000000 		call	__asan_report_load8@PLT	#
 922      00
 923              	.LVL57:
 924              	.L49:
 925 08ec 4889EE   		movq	%rbp, %rsi	# _42,
 926 08ef 488D3D00 		leaq	.Lubsan_data1076(%rip), %rdi	#, tmp482
 926      000000
 927 08f6 E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 927      00
 928              	.LVL58:
 929              	.L139:
 930              	# main.cpp:46:     cout << amazing << endl;
  46:main.cpp      **** }
 931              		.loc 1 46 13 view .LVU105
 932 08fb 4889EE   		movq	%rbp, %rsi	# tmp545,
 933 08fe 488D3D00 		leaq	.Lubsan_data1075(%rip), %rdi	#, tmp479
 933      000000
 934 0905 44896424 		movl	%r12d, 12(%rsp)	# amazing, %sfp
 934      0C
 935              	.LVL59:
  46:main.cpp      **** }
 936              		.loc 1 46 13 view .LVU106
 937 090a E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 937      00
 938              	.LVL60:
  46:main.cpp      **** }
 939              		.loc 1 46 13 view .LVU107
 940 090f 448B4C24 		movl	12(%rsp), %r9d	# %sfp, amazing
 940      0C
 941 0914 E9A7FBFF 		jmp	.L48	#
 941      FF
 942              	.LVL61:
 943              	.L141:
 944              	# main.cpp:46:     cout << amazing << endl;
  46:main.cpp      **** }
 945              		.loc 1 46 24 view .LVU108
 946 0919 4889EE   		movq	%rbp, %rsi	# _42,
 947 091c 488D3D00 		leaq	.Lubsan_data1077(%rip), %rdi	#, tmp496
 947      000000
 948 0923 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 948      00
 949              	.LVL62:
 950 0928 E911FCFF 		jmp	.L52	#
 950      FF
 951              	.LVL63:
 952              	.L119:
 953              	# main.cpp:34: int main() {
  34:main.cpp      ****     // SPEED;
 954              		.loc 1 34 12 view .LVU109
 955 092d BF400000 		movl	$64, %edi	#,
 955      00
 956 0932 E8000000 		call	__asan_stack_malloc_0@PLT	#
 956      00
 957              	.LVL64:
 958 0937 4885C0   		testq	%rax, %rax	#
 959 093a 480F4444 		cmove	24(%rsp), %rax	# %sfp,, tmp564
 959      2418
 960 0940 48894424 		movq	%rax, 24(%rsp)	# tmp564, %sfp
 960      18
 961 0945 E9E4F6FF 		jmp	.L1	#
 961      FF
 962              	.LVL65:
 963              	.L148:
  34:main.cpp      ****     // SPEED;
 964              		.loc 1 34 12 view .LVU110
 965 094a 48C7070E 		movq	$1172321806, (%rdi)	#,
 965      36E045
 966 0951 4889F8   		movq	%rdi, %rax	# tmp345, tmp345
 967 0954 488B7C24 		movq	40(%rsp), %rdi	# %sfp, tmp350
 967      28
 968 0959 48BBF5F5 		movabsq	$-723401728380766731, %rbx	#, tmp626
 968      F5F5F5F5 
 968      F5F5
 969 0963 48899F00 		movq	%rbx, 2147450880(%rdi)	# tmp626,
 969      80FF7F
 970 096a 488B4038 		movq	56(%rax), %rax	#, tmp352
 971 096e C60000   		movb	$0, (%rax)	#,
 972 0971 E973FDFF 		jmp	.L3	#
 972      FF
 973              	.LVL66:
 974              	.L147:
 975              	.LBB80:
 976              	.LBB72:
 977              	.LBB66:
 978              	.LBB61:
 979              	.LBB59:
 980              	# /usr/include/c++/11.1.0/ostream:704:     { return __os.flush(); }
 981              		.loc 4 704 24 view .LVU111
 982 0976 4889EE   		movq	%rbp, %rsi	# _150,
 983 0979 488D3D00 		leaq	.Lubsan_data1087(%rip), %rdi	#, tmp537
 983      000000
 984 0980 E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 984      00
 985              	.LVL67:
 986 0985 E937FDFF 		jmp	.L76	#
 986      FF
 987              	.LVL68:
 988              	.L143:
 989              		.loc 4 704 24 view .LVU112
 990              	.LBE59:
 991              	.LBE61:
 992              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 993              		.loc 4 682 39 view .LVU113
 994 098a 4889D7   		movq	%rdx, %rdi	# _312,
 995 098d E8000000 		call	__asan_report_load8@PLT	#
 995      00
 996              	.LVL69:
 997              	.L121:
 682:/usr/include/c++/11.1.0/ostream **** 
 998              		.loc 4 682 39 view .LVU114
 999              	.LBE66:
 1000              	.LBE72:
 1001              	.LBE80:
 1002              	# main.cpp:37:     cin >> n;
  37:main.cpp      ****     int best {0};
 1003              		.loc 1 37 12 view .LVU115
 1004 0992 4C89EE   		movq	%r13, %rsi	# tmp539,
 1005 0995 488D3D00 		leaq	.Lubsan_data1060(%rip), %rdi	#, tmp369
 1005      000000
 1006 099c E8000000 		call	__ubsan_handle_dynamic_type_cache_miss_abort@PLT	#
 1006      00
 1007              	.LVL70:
 1008 09a1 E944F7FF 		jmp	.L6	#
 1008      FF
 1009              	.LVL71:
 1010              	.L146:
 1011              	.LBB81:
 1012              	.LBB73:
 1013              	.LBB67:
 1014              	.LBB62:
 1015              	.LBB60:
 1016              	# /usr/include/c++/11.1.0/ostream:704:     { return __os.flush(); }
 1017              		.loc 4 704 24 view .LVU116
 1018 09a6 4889EF   		movq	%rbp, %rdi	# _150,
 1019 09a9 E8000000 		call	__asan_report_load8@PLT	#
 1019      00
 1020              	.LVL72:
 1021              	.L73:
 1022              		.loc 4 704 24 view .LVU117
 1023 09ae 4889EE   		movq	%rbp, %rsi	# _150,
 1024 09b1 488D3D00 		leaq	.Lubsan_data1086(%rip), %rdi	#, tmp523
 1024      000000
 1025 09b8 E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 1025      00
 1026              	.LVL73:
 1027              	.L120:
 1028              		.loc 4 704 24 view .LVU118
 1029              	.LBE60:
 1030              	.LBE62:
 1031              	.LBE67:
 1032              	.LBE73:
 1033              	.LBE81:
 1034              	# main.cpp:37:     cin >> n;
  37:main.cpp      ****     int best {0};
 1035              		.loc 1 37 12 view .LVU119
 1036 09bd 4C89EF   		movq	%r13, %rdi	# tmp539,
 1037 09c0 E8000000 		call	__asan_report_load8@PLT	#
 1037      00
 1038              	.LVL74:
 1039              	.L60:
 1040              	.LBB82:
 1041              	.LBB74:
 1042              	.LBB68:
 1043              	# /usr/include/c++/11.1.0/ostream:682:     { return flush(__os.put(__os.widen('\n'))); }
 682:/usr/include/c++/11.1.0/ostream **** 
 1044              		.loc 4 682 39 view .LVU120
 1045 09c5 4C89E6   		movq	%r12, %rsi	# _351,
 1046 09c8 488D3D00 		leaq	.Lubsan_data1081(%rip), %rdi	#, tmp503
 1046      000000
 1047 09cf E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 1047      00
 1048              	.LVL75:
 1049              	.L54:
 1050 09d4 4889D6   		movq	%rdx, %rsi	# _312,
 1051 09d7 488D3D00 		leaq	.Lubsan_data1079(%rip), %rdi	#, tmp499
 1051      000000
 1052 09de E8000000 		call	__ubsan_handle_type_mismatch_v1_abort@PLT	#
 1052      00
 1053              	.LVL76:
 1054              	.L142:
 682:/usr/include/c++/11.1.0/ostream **** 
 1055              		.loc 4 682 39 view .LVU121
 1056 09e3 4C89E6   		movq	%r12, %rsi	# _16,
 1057 09e6 488D3D00 		leaq	.Lubsan_data1078(%rip), %rdi	#, tmp497
 1057      000000
 1058 09ed E8000000 		call	__ubsan_handle_pointer_overflow_abort@PLT	#
 1058      00
 1059              	.LVL77:
 1060              	.L78:
 682:/usr/include/c++/11.1.0/ostream **** 
 1061              		.loc 4 682 39 view .LVU122
 1062              	.LBE68:
 1063              	.LBE74:
 1064              	.LBE82:
 1065 09f2 8B44240C 		movl	12(%rsp), %eax	# %sfp, worst
 1066 09f6 E9B7F8FF 		jmp	.L9	#
 1066      FF
 1067              		.cfi_endproc
 1068              	.LFE11038:
 1070              		.section	.rodata.str1.1
 1071              	.LC1:
 1072 000e 6D61696E 		.string	"main.cpp"
 1072      2E637070 
 1072      00
 1073              		.section	.text.startup
 1074 09fb 0F1F4400 		.p2align 4
 1074      00
 1076              	_GLOBAL__sub_I_main:
 1077              	.LASANPC12733:
 1078              	.LFB12733:
 1079              		.loc 1 47 1 is_stmt 1 view -0
 1080              		.cfi_startproc
 1081              	.LBB85:
 1082              	.LBI85:
 1083              		.loc 1 47 1 view .LVU124
 1084              	.LVL78:
 1085              		.loc 1 47 1 is_stmt 0 view .LVU125
 1086              	.LBE85:
 1087 0a00 55       		pushq	%rbp	#
 1088              		.cfi_def_cfa_offset 16
 1089              		.cfi_offset 6, -16
 1090              	.LBB88:
 1091              	.LBB86:
 1092              	# main.cpp:47: }
 1093              		.loc 1 47 1 view .LVU126
 1094 0a01 488D3D00 		leaq	.LC1(%rip), %rdi	#, tmp82
 1094      000000
 1095              	# /usr/include/c++/11.1.0/iostream:74:   static ios_base::Init __ioinit;
 1096              		.file 5 "/usr/include/c++/11.1.0/iostream"
   1:/usr/include/c++/11.1.0/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/11.1.0/iostream **** 
   3:/usr/include/c++/11.1.0/iostream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/iostream **** //
   5:/usr/include/c++/11.1.0/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/iostream **** // any later version.
  10:/usr/include/c++/11.1.0/iostream **** 
  11:/usr/include/c++/11.1.0/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/iostream **** 
  16:/usr/include/c++/11.1.0/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/iostream **** 
  20:/usr/include/c++/11.1.0/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/iostream **** 
  25:/usr/include/c++/11.1.0/iostream **** /** @file include/iostream
  26:/usr/include/c++/11.1.0/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11.1.0/iostream ****  */
  28:/usr/include/c++/11.1.0/iostream **** 
  29:/usr/include/c++/11.1.0/iostream **** //
  30:/usr/include/c++/11.1.0/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/11.1.0/iostream **** //
  32:/usr/include/c++/11.1.0/iostream **** 
  33:/usr/include/c++/11.1.0/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/11.1.0/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/11.1.0/iostream **** 
  36:/usr/include/c++/11.1.0/iostream **** #pragma GCC system_header
  37:/usr/include/c++/11.1.0/iostream **** 
  38:/usr/include/c++/11.1.0/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/11.1.0/iostream **** #include <ostream>
  40:/usr/include/c++/11.1.0/iostream **** #include <istream>
  41:/usr/include/c++/11.1.0/iostream **** 
  42:/usr/include/c++/11.1.0/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/11.1.0/iostream **** {
  44:/usr/include/c++/11.1.0/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/11.1.0/iostream **** 
  46:/usr/include/c++/11.1.0/iostream ****   /**
  47:/usr/include/c++/11.1.0/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/11.1.0/iostream ****    *
  49:/usr/include/c++/11.1.0/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/11.1.0/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/11.1.0/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/11.1.0/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/11.1.0/iostream ****    *
  54:/usr/include/c++/11.1.0/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/11.1.0/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/11.1.0/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/11.1.0/iostream ****    *  manual linked to above.
  58:/usr/include/c++/11.1.0/iostream ****   */
  59:/usr/include/c++/11.1.0/iostream ****   ///@{
  60:/usr/include/c++/11.1.0/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/11.1.0/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/11.1.0/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/11.1.0/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/11.1.0/iostream **** 
  65:/usr/include/c++/11.1.0/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/11.1.0/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/11.1.0/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/11.1.0/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/11.1.0/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/11.1.0/iostream **** #endif
  71:/usr/include/c++/11.1.0/iostream ****   ///@}
  72:/usr/include/c++/11.1.0/iostream **** 
  73:/usr/include/c++/11.1.0/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/11.1.0/iostream ****   static ios_base::Init __ioinit;
 1097              		.loc 5 74 25 view .LVU127
 1098 0a08 488D2D00 		leaq	_ZStL8__ioinit(%rip), %rbp	#, tmp83
 1098      000000
 1099              	# main.cpp:47: }
 1100              		.loc 1 47 1 view .LVU128
 1101 0a0f E8000000 		call	__asan_before_dynamic_init@PLT	#
 1101      00
 1102              	.LVL79:
 1103              	# /usr/include/c++/11.1.0/iostream:74:   static ios_base::Init __ioinit;
 1104              		.loc 5 74 25 view .LVU129
 1105 0a14 4889EF   		movq	%rbp, %rdi	# tmp83,
 1106 0a17 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT	#
 1106      00
 1107              	.LVL80:
 1108 0a1c 488B3D00 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rdi	#,
 1108      000000
 1109 0a23 4889EE   		movq	%rbp, %rsi	# tmp83,
 1110 0a26 488D1500 		leaq	__dso_handle(%rip), %rdx	#, tmp84
 1110      000000
 1111 0a2d E8000000 		call	__cxa_atexit@PLT	#
 1111      00
 1112              	.LVL81:
 1113              	.LBE86:
 1114              	.LBE88:
 1115              	# main.cpp:47: }
 1116              		.loc 1 47 1 view .LVU130
 1117 0a32 5D       		popq	%rbp	#
 1118              		.cfi_def_cfa_offset 8
 1119              	.LBB89:
 1120              	.LBB87:
 1121              	# /usr/include/c++/11.1.0/iostream:74:   static ios_base::Init __ioinit;
 1122              		.loc 5 74 25 view .LVU131
 1123 0a33 E9000000 		jmp	__asan_after_dynamic_init@PLT	#
 1123      00
 1124              	.LVL82:
 1125              	.LBE87:
 1126              	.LBE89:
 1127              		.cfi_endproc
 1128              	.LFE12733:
 1130              		.section	.init_array,"aw"
 1131              		.align 8
 1132 0000 00000000 		.quad	_GLOBAL__sub_I_main
 1132      00000000 
 1133              		.section	.data.rel.local,"aw"
 1134              		.align 32
 1137              	.Lubsan_data1089:
 1138              	# <anonymous>:
 1139              	# __filename:
 1140 0000 00000000 		.quad	.LC1
 1140      00000000 
 1141              	# __line:
 1142 0008 2C000000 		.long	44
 1143              	# __column:
 1144 000c 23000000 		.long	35
 1145              	# <anonymous>:
 1146 0010 00000000 		.quad	.Lubsan_type14
 1146      00000000 
 1147 0018 00000000 		.zero	40
 1147      00000000 
 1147      00000000 
 1147      00000000 
 1147      00000000 
 1148              		.align 32
 1151              	.Lubsan_data1088:
 1152              	# <anonymous>:
 1153              	# __filename:
 1154 0040 00000000 		.quad	.LC1
 1154      00000000 
 1155              	# __line:
 1156 0048 2B000000 		.long	43
 1157              	# __column:
 1158 004c 21000000 		.long	33
 1159              	# <anonymous>:
 1160 0050 00000000 		.quad	.Lubsan_type14
 1160      00000000 
 1161 0058 00000000 		.zero	40
 1161      00000000 
 1161      00000000 
 1161      00000000 
 1161      00000000 
 1162              		.data
 1163              		.align 32
 1166              	.Lubsan_type14:
 1167              	# __typekind:
 1169              	# __typeinfo:
 1171              	# __typename:
 1172 0004 27696E74 		.string	"'int'"
 1172      2700
 1173 000a 00000000 		.zero	54
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1174              		.section	.rodata
 1175              		.align 32
 1176              	.LC2:
 1177 0000 2F757372 		.string	"/usr/include/c++/11.1.0/ostream"
 1177      2F696E63 
 1177      6C756465 
 1177      2F632B2B 
 1177      2F31312E 
 1178 0020 00000000 		.zero	32
 1178      00000000 
 1178      00000000 
 1178      00000000 
 1178      00000000 
 1179              		.section	.data.rel,"aw"
 1180              		.align 32
 1183              	.Lubsan_data1087:
 1184              	# <anonymous>:
 1185              	# __filename:
 1186 0000 00000000 		.quad	.LC2
 1186      00000000 
 1187              	# __line:
 1188 0008 C0020000 		.long	704
 1189              	# __column:
 1190 000c 18000000 		.long	24
 1191              	# <anonymous>:
 1192 0010 00000000 		.quad	.Lubsan_type12
 1192      00000000 
 1193              	# <anonymous>:
 1194 0018 00000000 		.quad	_ZTISo
 1194      00000000 
 1195              	# <anonymous>:
 1196 0020 04       		.byte	4
 1197 0021 00000000 		.zero	7
 1197      000000
 1198 0028 00000000 		.zero	56
 1198      00000000 
 1198      00000000 
 1198      00000000 
 1198      00000000 
 1199              		.section	.data.rel.local
 1200              		.align 32
 1203              	.Lubsan_data1086:
 1204              	# <anonymous>:
 1205              	# __filename:
 1206 0080 00000000 		.quad	.LC2
 1206      00000000 
 1207              	# __line:
 1208 0088 C0020000 		.long	704
 1209              	# __column:
 1210 008c 18000000 		.long	24
 1211              	# <anonymous>:
 1212 0090 00000000 		.quad	.Lubsan_type13
 1212      00000000 
 1213              	# <anonymous>:
 1214 0098 03       		.byte	3
 1215              	# <anonymous>:
 1216 0099 04       		.byte	4
 1217 009a 00000000 		.zero	6
 1217      0000
 1218 00a0 00000000 		.zero	32
 1218      00000000 
 1218      00000000 
 1218      00000000 
 1218      00000000 
 1219              		.align 32
 1222              	.Lubsan_data1085:
 1223              	# <anonymous>:
 1224              	# __filename:
 1225 00c0 00000000 		.quad	.LC2
 1225      00000000 
 1226              	# __line:
 1227 00c8 AA020000 		.long	682
 1228              	# __column:
 1229 00cc 27000000 		.long	39
 1230 00d0 00000000 		.zero	48
 1230      00000000 
 1230      00000000 
 1230      00000000 
 1230      00000000 
 1231              		.section	.data.rel
 1232              		.align 32
 1235              	.Lubsan_data1084:
 1236              	# <anonymous>:
 1237              	# __filename:
 1238 0060 00000000 		.quad	.LC2
 1238      00000000 
 1239              	# __line:
 1240 0068 AA020000 		.long	682
 1241              	# __column:
 1242 006c 27000000 		.long	39
 1243              	# <anonymous>:
 1244 0070 00000000 		.quad	.Lubsan_type9
 1244      00000000 
 1245              	# <anonymous>:
 1246 0078 00000000 		.quad	_ZTISt9basic_iosIcSt11char_traitsIcEE
 1246      00000000 
 1247              	# <anonymous>:
 1248 0080 04       		.byte	4
 1249 0081 00000000 		.zero	7
 1249      000000
 1250 0088 00000000 		.zero	56
 1250      00000000 
 1250      00000000 
 1250      00000000 
 1250      00000000 
 1251              		.section	.data.rel.local
 1252              		.align 32
 1255              	.Lubsan_data1083:
 1256              	# <anonymous>:
 1257              	# __filename:
 1258 0100 00000000 		.quad	.LC2
 1258      00000000 
 1259              	# __line:
 1260 0108 AA020000 		.long	682
 1261              	# __column:
 1262 010c 27000000 		.long	39
 1263 0110 00000000 		.zero	48
 1263      00000000 
 1263      00000000 
 1263      00000000 
 1263      00000000 
 1264              		.align 32
 1267              	.Lubsan_data1082:
 1268              	# <anonymous>:
 1269              	# __filename:
 1270 0140 00000000 		.quad	.LC2
 1270      00000000 
 1271              	# __line:
 1272 0148 AA020000 		.long	682
 1273              	# __column:
 1274 014c 27000000 		.long	39
 1275 0150 00000000 		.zero	48
 1275      00000000 
 1275      00000000 
 1275      00000000 
 1275      00000000 
 1276              		.align 32
 1279              	.Lubsan_data1081:
 1280              	# <anonymous>:
 1281              	# __filename:
 1282 0180 00000000 		.quad	.LC2
 1282      00000000 
 1283              	# __line:
 1284 0188 AA020000 		.long	682
 1285              	# __column:
 1286 018c 27000000 		.long	39
 1287              	# <anonymous>:
 1288 0190 00000000 		.quad	.Lubsan_type8
 1288      00000000 
 1289              	# <anonymous>:
 1290 0198 03       		.byte	3
 1291              	# <anonymous>:
 1292 0199 04       		.byte	4
 1293 019a 00000000 		.zero	6
 1293      0000
 1294 01a0 00000000 		.zero	32
 1294      00000000 
 1294      00000000 
 1294      00000000 
 1294      00000000 
 1295              		.align 32
 1298              	.Lubsan_data1080:
 1299              	# <anonymous>:
 1300              	# __filename:
 1301 01c0 00000000 		.quad	.LC2
 1301      00000000 
 1302              	# __line:
 1303 01c8 AA020000 		.long	682
 1304              	# __column:
 1305 01cc 27000000 		.long	39
 1306 01d0 00000000 		.zero	48
 1306      00000000 
 1306      00000000 
 1306      00000000 
 1306      00000000 
 1307              		.align 32
 1310              	.Lubsan_data1079:
 1311              	# <anonymous>:
 1312              	# __filename:
 1313 0200 00000000 		.quad	.LC2
 1313      00000000 
 1314              	# __line:
 1315 0208 AA020000 		.long	682
 1316              	# __column:
 1317 020c 27000000 		.long	39
 1318              	# <anonymous>:
 1319 0210 00000000 		.quad	.Lubsan_type7
 1319      00000000 
 1320              	# <anonymous>:
 1321 0218 03       		.byte	3
 1322              	# <anonymous>:
 1323 0219 00       		.byte	0
 1324 021a 00000000 		.zero	6
 1324      0000
 1325 0220 00000000 		.zero	32
 1325      00000000 
 1325      00000000 
 1325      00000000 
 1325      00000000 
 1326              		.align 32
 1329              	.Lubsan_data1078:
 1330              	# <anonymous>:
 1331              	# __filename:
 1332 0240 00000000 		.quad	.LC2
 1332      00000000 
 1333              	# __line:
 1334 0248 AA020000 		.long	682
 1335              	# __column:
 1336 024c 27000000 		.long	39
 1337 0250 00000000 		.zero	48
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1338              		.section	.data.rel
 1339              		.align 32
 1342              	.Lubsan_data1077:
 1343              	# <anonymous>:
 1344              	# __filename:
 1345 00c0 00000000 		.quad	.LC1
 1345      00000000 
 1346              	# __line:
 1347 00c8 2E000000 		.long	46
 1348              	# __column:
 1349 00cc 18000000 		.long	24
 1350              	# <anonymous>:
 1351 00d0 00000000 		.quad	.Lubsan_type12
 1351      00000000 
 1352              	# <anonymous>:
 1353 00d8 00000000 		.quad	_ZTISo
 1353      00000000 
 1354              	# <anonymous>:
 1355 00e0 04       		.byte	4
 1356 00e1 00000000 		.zero	7
 1356      000000
 1357 00e8 00000000 		.zero	56
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1358              		.section	.data.rel.local
 1359              		.align 32
 1362              	.Lubsan_data1076:
 1363              	# <anonymous>:
 1364              	# __filename:
 1365 0280 00000000 		.quad	.LC1
 1365      00000000 
 1366              	# __line:
 1367 0288 2E000000 		.long	46
 1368              	# __column:
 1369 028c 18000000 		.long	24
 1370              	# <anonymous>:
 1371 0290 00000000 		.quad	.Lubsan_type13
 1371      00000000 
 1372              	# <anonymous>:
 1373 0298 03       		.byte	3
 1374              	# <anonymous>:
 1375 0299 04       		.byte	4
 1376 029a 00000000 		.zero	6
 1376      0000
 1377 02a0 00000000 		.zero	32
 1377      00000000 
 1377      00000000 
 1377      00000000 
 1377      00000000 
 1378              		.data
 1379              		.align 32
 1382              	.Lubsan_type13:
 1383              	# __typekind:
 1385              	# __typeinfo:
 1387              	# __typename:
 1388 0044 27737472 		.string	"'struct basic_ostream'"
 1388      75637420 
 1388      62617369 
 1388      635F6F73 
 1388      74726561 
 1389 005b 00000000 		.zero	37
 1389      00000000 
 1389      00000000 
 1389      00000000 
 1389      00000000 
 1390              		.section	.data.rel
 1391              		.align 32
 1394              	.Lubsan_data1075:
 1395              	# <anonymous>:
 1396              	# __filename:
 1397 0120 00000000 		.quad	.LC1
 1397      00000000 
 1398              	# __line:
 1399 0128 2E000000 		.long	46
 1400              	# __column:
 1401 012c 0D000000 		.long	13
 1402              	# <anonymous>:
 1403 0130 00000000 		.quad	.Lubsan_type12
 1403      00000000 
 1404              	# <anonymous>:
 1405 0138 00000000 		.quad	_ZTISo
 1405      00000000 
 1406              	# <anonymous>:
 1407 0140 04       		.byte	4
 1408 0141 00000000 		.zero	7
 1408      000000
 1409 0148 00000000 		.zero	56
 1409      00000000 
 1409      00000000 
 1409      00000000 
 1409      00000000 
 1410              		.data
 1411              		.align 32
 1414              	.Lubsan_type12:
 1415              	# __typekind:
 1417              	# __typeinfo:
 1419              	# __typename:
 1420 0084 27626173 		.string	"'basic_ostream'"
 1420      69635F6F 
 1420      73747265 
 1420      616D2700 
 1421 0094 00000000 		.zero	44
 1421      00000000 
 1421      00000000 
 1421      00000000 
 1421      00000000 
 1422              		.section	.rodata
 1423              		.align 32
 1424              	.LC3:
 1425 0040 2F757372 		.string	"/usr/include/c++/11.1.0/bits/basic_ios.h"
 1425      2F696E63 
 1425      6C756465 
 1425      2F632B2B 
 1425      2F31312E 
 1426 0069 00000000 		.zero	55
 1426      00000000 
 1426      00000000 
 1426      00000000 
 1426      00000000 
 1427              		.section	.data.rel.local
 1428              		.align 32
 1431              	.Lubsan_data1074:
 1432              	# <anonymous>:
 1433              	# __filename:
 1434 02c0 00000000 		.quad	.LC3
 1434      00000000 
 1435              	# __line:
 1436 02c8 8A000000 		.long	138
 1437              	# __column:
 1438 02cc 10000000 		.long	16
 1439 02d0 00000000 		.zero	48
 1439      00000000 
 1439      00000000 
 1439      00000000 
 1439      00000000 
 1440              		.align 32
 1443              	.Lubsan_data1073:
 1444              	# <anonymous>:
 1445              	# __filename:
 1446 0300 00000000 		.quad	.LC3
 1446      00000000 
 1447              	# __line:
 1448 0308 8A000000 		.long	138
 1449              	# __column:
 1450 030c 10000000 		.long	16
 1451              	# <anonymous>:
 1452 0310 00000000 		.quad	.Lubsan_type11
 1452      00000000 
 1453              	# <anonymous>:
 1454 0318 03       		.byte	3
 1455              	# <anonymous>:
 1456 0319 03       		.byte	3
 1457 031a 00000000 		.zero	6
 1457      0000
 1458 0320 00000000 		.zero	32
 1458      00000000 
 1458      00000000 
 1458      00000000 
 1458      00000000 
 1459              		.data
 1460              		.align 32
 1463              	.Lubsan_type11:
 1464              	# __typekind:
 1466              	# __typeinfo:
 1468              	# __typename:
 1469 00c4 27636F6E 		.string	"'const struct ios_base'"
 1469      73742073 
 1469      74727563 
 1469      7420696F 
 1469      735F6261 
 1470 00dc 00000000 		.zero	36
 1470      00000000 
 1470      00000000 
 1470      00000000 
 1470      00000000 
 1471              		.section	.data.rel
 1472              		.align 32
 1475              	.Lubsan_data1072:
 1476              	# <anonymous>:
 1477              	# __filename:
 1478 0180 00000000 		.quad	.LC3
 1478      00000000 
 1479              	# __line:
 1480 0188 8A000000 		.long	138
 1481              	# __column:
 1482 018c 10000000 		.long	16
 1483              	# <anonymous>:
 1484 0190 00000000 		.quad	.Lubsan_type10
 1484      00000000 
 1485              	# <anonymous>:
 1486 0198 00000000 		.quad	_ZTISt8ios_base
 1486      00000000 
 1487              	# <anonymous>:
 1488 01a0 03       		.byte	3
 1489 01a1 00000000 		.zero	7
 1489      000000
 1490 01a8 00000000 		.zero	56
 1490      00000000 
 1490      00000000 
 1490      00000000 
 1490      00000000 
 1491              		.data
 1492              		.align 32
 1495              	.Lubsan_type10:
 1496              	# __typekind:
 1498              	# __typeinfo:
 1500              	# __typename:
 1501 0104 27696F73 		.string	"'ios_base'"
 1501      5F626173 
 1501      652700
 1502 010f 00000000 		.zero	49
 1502      00000000 
 1502      00000000 
 1502      00000000 
 1502      00000000 
 1503              		.section	.data.rel.local
 1504              		.align 32
 1507              	.Lubsan_data1071:
 1508              	# <anonymous>:
 1509              	# __filename:
 1510 0340 00000000 		.quad	.LC1
 1510      00000000 
 1511              	# __line:
 1512 0348 29000000 		.long	41
 1513              	# __column:
 1514 034c 13000000 		.long	19
 1515 0350 00000000 		.zero	48
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1516              		.section	.data.rel
 1517              		.align 32
 1520              	.Lubsan_data1070:
 1521              	# <anonymous>:
 1522              	# __filename:
 1523 01e0 00000000 		.quad	.LC1
 1523      00000000 
 1524              	# __line:
 1525 01e8 29000000 		.long	41
 1526              	# __column:
 1527 01ec 13000000 		.long	19
 1528              	# <anonymous>:
 1529 01f0 00000000 		.quad	.Lubsan_type9
 1529      00000000 
 1530              	# <anonymous>:
 1531 01f8 00000000 		.quad	_ZTISt9basic_iosIcSt11char_traitsIcEE
 1531      00000000 
 1532              	# <anonymous>:
 1533 0200 04       		.byte	4
 1534 0201 00000000 		.zero	7
 1534      000000
 1535 0208 00000000 		.zero	56
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1536              		.data
 1537              		.align 32
 1540              	.Lubsan_type9:
 1541              	# __typekind:
 1543              	# __typeinfo:
 1545              	# __typename:
 1546 0144 27626173 		.string	"'basic_ios'"
 1546      69635F69 
 1546      6F732700 
 1547 0150 00000000 		.zero	48
 1547      00000000 
 1547      00000000 
 1547      00000000 
 1547      00000000 
 1548              		.section	.data.rel.local
 1549              		.align 32
 1552              	.Lubsan_data1069:
 1553              	# <anonymous>:
 1554              	# __filename:
 1555 0380 00000000 		.quad	.LC1
 1555      00000000 
 1556              	# __line:
 1557 0388 29000000 		.long	41
 1558              	# __column:
 1559 038c 13000000 		.long	19
 1560 0390 00000000 		.zero	48
 1560      00000000 
 1560      00000000 
 1560      00000000 
 1560      00000000 
 1561              		.align 32
 1564              	.Lubsan_data1068:
 1565              	# <anonymous>:
 1566              	# __filename:
 1567 03c0 00000000 		.quad	.LC1
 1567      00000000 
 1568              	# __line:
 1569 03c8 29000000 		.long	41
 1570              	# __column:
 1571 03cc 13000000 		.long	19
 1572 03d0 00000000 		.zero	48
 1572      00000000 
 1572      00000000 
 1572      00000000 
 1572      00000000 
 1573              		.align 32
 1576              	.Lubsan_data1067:
 1577              	# <anonymous>:
 1578              	# __filename:
 1579 0400 00000000 		.quad	.LC1
 1579      00000000 
 1580              	# __line:
 1581 0408 29000000 		.long	41
 1582              	# __column:
 1583 040c 13000000 		.long	19
 1584              	# <anonymous>:
 1585 0410 00000000 		.quad	.Lubsan_type8
 1585      00000000 
 1586              	# <anonymous>:
 1587 0418 03       		.byte	3
 1588              	# <anonymous>:
 1589 0419 04       		.byte	4
 1590 041a 00000000 		.zero	6
 1590      0000
 1591 0420 00000000 		.zero	32
 1591      00000000 
 1591      00000000 
 1591      00000000 
 1591      00000000 
 1592              		.data
 1593              		.align 32
 1596              	.Lubsan_type8:
 1597              	# __typekind:
 1599              	# __typeinfo:
 1601              	# __typename:
 1602 0184 27737472 		.string	"'struct basic_ios'"
 1602      75637420 
 1602      62617369 
 1602      635F696F 
 1602      732700
 1603 0197 00000000 		.zero	41
 1603      00000000 
 1603      00000000 
 1603      00000000 
 1603      00000000 
 1604              		.section	.data.rel.local
 1605              		.align 32
 1608              	.Lubsan_data1066:
 1609              	# <anonymous>:
 1610              	# __filename:
 1611 0440 00000000 		.quad	.LC1
 1611      00000000 
 1612              	# __line:
 1613 0448 29000000 		.long	41
 1614              	# __column:
 1615 044c 13000000 		.long	19
 1616 0450 00000000 		.zero	48
 1616      00000000 
 1616      00000000 
 1616      00000000 
 1616      00000000 
 1617              		.align 32
 1620              	.Lubsan_data1065:
 1621              	# <anonymous>:
 1622              	# __filename:
 1623 0480 00000000 		.quad	.LC1
 1623      00000000 
 1624              	# __line:
 1625 0488 29000000 		.long	41
 1626              	# __column:
 1627 048c 13000000 		.long	19
 1628              	# <anonymous>:
 1629 0490 00000000 		.quad	.Lubsan_type7
 1629      00000000 
 1630              	# <anonymous>:
 1631 0498 03       		.byte	3
 1632              	# <anonymous>:
 1633 0499 00       		.byte	0
 1634 049a 00000000 		.zero	6
 1634      0000
 1635 04a0 00000000 		.zero	32
 1635      00000000 
 1635      00000000 
 1635      00000000 
 1635      00000000 
 1636              		.data
 1637              		.align 32
 1640              	.Lubsan_type7:
 1641              	# __typekind:
 1643              	# __typeinfo:
 1645              	# __typename:
 1646 01c4 276C6F6E 		.string	"'long int'"
 1646      6720696E 
 1646      742700
 1647 01cf 00000000 		.zero	49
 1647      00000000 
 1647      00000000 
 1647      00000000 
 1647      00000000 
 1648              		.section	.data.rel.local
 1649              		.align 32
 1652              	.Lubsan_data1064:
 1653              	# <anonymous>:
 1654              	# __filename:
 1655 04c0 00000000 		.quad	.LC1
 1655      00000000 
 1656              	# __line:
 1657 04c8 29000000 		.long	41
 1658              	# __column:
 1659 04cc 13000000 		.long	19
 1660 04d0 00000000 		.zero	48
 1660      00000000 
 1660      00000000 
 1660      00000000 
 1660      00000000 
 1661              		.section	.data.rel
 1662              		.align 32
 1665              	.Lubsan_data1063:
 1666              	# <anonymous>:
 1667              	# __filename:
 1668 0240 00000000 		.quad	.LC1
 1668      00000000 
 1669              	# __line:
 1670 0248 29000000 		.long	41
 1671              	# __column:
 1672 024c 13000000 		.long	19
 1673              	# <anonymous>:
 1674 0250 00000000 		.quad	.Lubsan_type5
 1674      00000000 
 1675              	# <anonymous>:
 1676 0258 00000000 		.quad	_ZTISi
 1676      00000000 
 1677              	# <anonymous>:
 1678 0260 09       		.byte	9
 1679 0261 00000000 		.zero	7
 1679      000000
 1680 0268 00000000 		.zero	56
 1680      00000000 
 1680      00000000 
 1680      00000000 
 1680      00000000 
 1681              		.section	.data.rel.local
 1682              		.align 32
 1685              	.Lubsan_data1062:
 1686              	# <anonymous>:
 1687              	# __filename:
 1688 0500 00000000 		.quad	.LC1
 1688      00000000 
 1689              	# __line:
 1690 0508 29000000 		.long	41
 1691              	# __column:
 1692 050c 13000000 		.long	19
 1693              	# <anonymous>:
 1694 0510 00000000 		.quad	.Lubsan_type6
 1694      00000000 
 1695              	# <anonymous>:
 1696 0518 03       		.byte	3
 1697              	# <anonymous>:
 1698 0519 03       		.byte	3
 1699 051a 00000000 		.zero	6
 1699      0000
 1700 0520 00000000 		.zero	32
 1700      00000000 
 1700      00000000 
 1700      00000000 
 1700      00000000 
 1701              		.data
 1702              		.align 32
 1705              	.Lubsan_type6:
 1706              	# __typekind:
 1708              	# __typeinfo:
 1710              	# __typename:
 1711 0204 27737472 		.string	"'struct __istream_type'"
 1711      75637420 
 1711      5F5F6973 
 1711      74726561 
 1711      6D5F7479 
 1712 021c 00000000 		.zero	36
 1712      00000000 
 1712      00000000 
 1712      00000000 
 1712      00000000 
 1713              		.section	.data.rel
 1714              		.align 32
 1717              	.Lubsan_data1061:
 1718              	# <anonymous>:
 1719              	# __filename:
 1720 02a0 00000000 		.quad	.LC1
 1720      00000000 
 1721              	# __line:
 1722 02a8 29000000 		.long	41
 1723              	# __column:
 1724 02ac 13000000 		.long	19
 1725              	# <anonymous>:
 1726 02b0 00000000 		.quad	.Lubsan_type5
 1726      00000000 
 1727              	# <anonymous>:
 1728 02b8 00000000 		.quad	_ZTISi
 1728      00000000 
 1729              	# <anonymous>:
 1730 02c0 04       		.byte	4
 1731 02c1 00000000 		.zero	7
 1731      000000
 1732 02c8 00000000 		.zero	56
 1732      00000000 
 1732      00000000 
 1732      00000000 
 1732      00000000 
 1733              		.align 32
 1736              	.Lubsan_data1060:
 1737              	# <anonymous>:
 1738              	# __filename:
 1739 0300 00000000 		.quad	.LC1
 1739      00000000 
 1740              	# __line:
 1741 0308 25000000 		.long	37
 1742              	# __column:
 1743 030c 0C000000 		.long	12
 1744              	# <anonymous>:
 1745 0310 00000000 		.quad	.Lubsan_type5
 1745      00000000 
 1746              	# <anonymous>:
 1747 0318 00000000 		.quad	_ZTISi
 1747      00000000 
 1748              	# <anonymous>:
 1749 0320 04       		.byte	4
 1750 0321 00000000 		.zero	7
 1750      000000
 1751 0328 00000000 		.zero	56
 1751      00000000 
 1751      00000000 
 1751      00000000 
 1751      00000000 
 1752              		.data
 1753              		.align 32
 1756              	.Lubsan_type5:
 1757              	# __typekind:
 1759              	# __typeinfo:
 1761              	# __typename:
 1762 0244 27626173 		.string	"'basic_istream'"
 1762      69635F69 
 1762      73747265 
 1762      616D2700 
 1763 0254 00000000 		.zero	44
 1763      00000000 
 1763      00000000 
 1763      00000000 
 1763      00000000 
 1764              		.bss
 1765              		.align 32
 1768              	_ZStL8__ioinit:
 1769 0000 00000000 		.zero	64
 1769      00000000 
 1769      00000000 
 1769      00000000 
 1769      00000000 
 1770              		.section	.rodata.str1.8,"aMS",@progbits,1
 1771              		.align 8
 1772              	.LC4:
 1773 0000 2F757372 		.string	"/usr/include/c++/11.1.0/iostream"
 1773      2F696E63 
 1773      6C756465 
 1773      2F632B2B 
 1773      2F31312E 
 1774              		.section	.data.rel.local
 1775              		.align 16
 1778              	.LASANLOC1:
 1779              	# __filename:
 1780 0540 00000000 		.quad	.LC4
 1780      00000000 
 1781              	# __line:
 1782 0548 4A000000 		.long	74
 1783              	# __column:
 1784 054c 19000000 		.long	25
 1785              		.section	.rodata.str1.1
 1786              	.LC5:
 1787 0017 2A2E4C75 		.string	"*.Lubsan_data1089"
 1787      6273616E 
 1787      5F646174 
 1787      61313038 
 1787      3900
 1788              	.LC6:
 1789 0029 2A2E4C75 		.string	"*.Lubsan_data1088"
 1789      6273616E 
 1789      5F646174 
 1789      61313038 
 1789      3800
 1790              	.LC7:
 1791 003b 2A2E4C75 		.string	"*.Lubsan_type14"
 1791      6273616E 
 1791      5F747970 
 1791      65313400 
 1792              	.LC8:
 1793 004b 2A2E4C75 		.string	"*.Lubsan_data1087"
 1793      6273616E 
 1793      5F646174 
 1793      61313038 
 1793      3700
 1794              	.LC9:
 1795 005d 2A2E4C75 		.string	"*.Lubsan_data1086"
 1795      6273616E 
 1795      5F646174 
 1795      61313038 
 1795      3600
 1796              	.LC10:
 1797 006f 2A2E4C75 		.string	"*.Lubsan_data1085"
 1797      6273616E 
 1797      5F646174 
 1797      61313038 
 1797      3500
 1798              	.LC11:
 1799 0081 2A2E4C75 		.string	"*.Lubsan_data1084"
 1799      6273616E 
 1799      5F646174 
 1799      61313038 
 1799      3400
 1800              	.LC12:
 1801 0093 2A2E4C75 		.string	"*.Lubsan_data1083"
 1801      6273616E 
 1801      5F646174 
 1801      61313038 
 1801      3300
 1802              	.LC13:
 1803 00a5 2A2E4C75 		.string	"*.Lubsan_data1082"
 1803      6273616E 
 1803      5F646174 
 1803      61313038 
 1803      3200
 1804              	.LC14:
 1805 00b7 2A2E4C75 		.string	"*.Lubsan_data1081"
 1805      6273616E 
 1805      5F646174 
 1805      61313038 
 1805      3100
 1806              	.LC15:
 1807 00c9 2A2E4C75 		.string	"*.Lubsan_data1080"
 1807      6273616E 
 1807      5F646174 
 1807      61313038 
 1807      3000
 1808              	.LC16:
 1809 00db 2A2E4C75 		.string	"*.Lubsan_data1079"
 1809      6273616E 
 1809      5F646174 
 1809      61313037 
 1809      3900
 1810              	.LC17:
 1811 00ed 2A2E4C75 		.string	"*.Lubsan_data1078"
 1811      6273616E 
 1811      5F646174 
 1811      61313037 
 1811      3800
 1812              	.LC18:
 1813 00ff 2A2E4C75 		.string	"*.Lubsan_data1077"
 1813      6273616E 
 1813      5F646174 
 1813      61313037 
 1813      3700
 1814              	.LC19:
 1815 0111 2A2E4C75 		.string	"*.Lubsan_data1076"
 1815      6273616E 
 1815      5F646174 
 1815      61313037 
 1815      3600
 1816              	.LC20:
 1817 0123 2A2E4C75 		.string	"*.Lubsan_type13"
 1817      6273616E 
 1817      5F747970 
 1817      65313300 
 1818              	.LC21:
 1819 0133 2A2E4C75 		.string	"*.Lubsan_data1075"
 1819      6273616E 
 1819      5F646174 
 1819      61313037 
 1819      3500
 1820              	.LC22:
 1821 0145 2A2E4C75 		.string	"*.Lubsan_type12"
 1821      6273616E 
 1821      5F747970 
 1821      65313200 
 1822              	.LC23:
 1823 0155 2A2E4C75 		.string	"*.Lubsan_data1074"
 1823      6273616E 
 1823      5F646174 
 1823      61313037 
 1823      3400
 1824              	.LC24:
 1825 0167 2A2E4C75 		.string	"*.Lubsan_data1073"
 1825      6273616E 
 1825      5F646174 
 1825      61313037 
 1825      3300
 1826              	.LC25:
 1827 0179 2A2E4C75 		.string	"*.Lubsan_type11"
 1827      6273616E 
 1827      5F747970 
 1827      65313100 
 1828              	.LC26:
 1829 0189 2A2E4C75 		.string	"*.Lubsan_data1072"
 1829      6273616E 
 1829      5F646174 
 1829      61313037 
 1829      3200
 1830              	.LC27:
 1831 019b 2A2E4C75 		.string	"*.Lubsan_type10"
 1831      6273616E 
 1831      5F747970 
 1831      65313000 
 1832              	.LC28:
 1833 01ab 2A2E4C75 		.string	"*.Lubsan_data1071"
 1833      6273616E 
 1833      5F646174 
 1833      61313037 
 1833      3100
 1834              	.LC29:
 1835 01bd 2A2E4C75 		.string	"*.Lubsan_data1070"
 1835      6273616E 
 1835      5F646174 
 1835      61313037 
 1835      3000
 1836              	.LC30:
 1837 01cf 2A2E4C75 		.string	"*.Lubsan_type9"
 1837      6273616E 
 1837      5F747970 
 1837      653900
 1838              	.LC31:
 1839 01de 2A2E4C75 		.string	"*.Lubsan_data1069"
 1839      6273616E 
 1839      5F646174 
 1839      61313036 
 1839      3900
 1840              	.LC32:
 1841 01f0 2A2E4C75 		.string	"*.Lubsan_data1068"
 1841      6273616E 
 1841      5F646174 
 1841      61313036 
 1841      3800
 1842              	.LC33:
 1843 0202 2A2E4C75 		.string	"*.Lubsan_data1067"
 1843      6273616E 
 1843      5F646174 
 1843      61313036 
 1843      3700
 1844              	.LC34:
 1845 0214 2A2E4C75 		.string	"*.Lubsan_type8"
 1845      6273616E 
 1845      5F747970 
 1845      653800
 1846              	.LC35:
 1847 0223 2A2E4C75 		.string	"*.Lubsan_data1066"
 1847      6273616E 
 1847      5F646174 
 1847      61313036 
 1847      3600
 1848              	.LC36:
 1849 0235 2A2E4C75 		.string	"*.Lubsan_data1065"
 1849      6273616E 
 1849      5F646174 
 1849      61313036 
 1849      3500
 1850              	.LC37:
 1851 0247 2A2E4C75 		.string	"*.Lubsan_type7"
 1851      6273616E 
 1851      5F747970 
 1851      653700
 1852              	.LC38:
 1853 0256 2A2E4C75 		.string	"*.Lubsan_data1064"
 1853      6273616E 
 1853      5F646174 
 1853      61313036 
 1853      3400
 1854              	.LC39:
 1855 0268 2A2E4C75 		.string	"*.Lubsan_data1063"
 1855      6273616E 
 1855      5F646174 
 1855      61313036 
 1855      3300
 1856              	.LC40:
 1857 027a 2A2E4C75 		.string	"*.Lubsan_data1062"
 1857      6273616E 
 1857      5F646174 
 1857      61313036 
 1857      3200
 1858              	.LC41:
 1859 028c 2A2E4C75 		.string	"*.Lubsan_type6"
 1859      6273616E 
 1859      5F747970 
 1859      653600
 1860              	.LC42:
 1861 029b 2A2E4C75 		.string	"*.Lubsan_data1061"
 1861      6273616E 
 1861      5F646174 
 1861      61313036 
 1861      3100
 1862              	.LC43:
 1863 02ad 2A2E4C75 		.string	"*.Lubsan_data1060"
 1863      6273616E 
 1863      5F646174 
 1863      61313036 
 1863      3000
 1864              	.LC44:
 1865 02bf 2A2E4C75 		.string	"*.Lubsan_type5"
 1865      6273616E 
 1865      5F747970 
 1865      653500
 1866              	.LC45:
 1867 02ce 5F5F696F 		.string	"__ioinit"
 1867      696E6974 
 1867      00
 1868              	.LC46:
 1869 02d7 2A2E4C43 		.string	"*.LC2"
 1869      3200
 1870              	.LC47:
 1871 02dd 2A2E4C43 		.string	"*.LC3"
 1871      3300
 1872              		.section	.data.rel.local
 1873 0550 00000000 		.align 32
 1873      00000000 
 1873      00000000 
 1873      00000000 
 1876              	.LASAN0:
 1877              	# __beg:
 1878 0560 00000000 		.quad	.Lubsan_data1089
 1878      00000000 
 1879              	# __size:
 1880 0568 18000000 		.quad	24
 1880      00000000 
 1881              	# __size_with_redzone:
 1882 0570 40000000 		.quad	64
 1882      00000000 
 1883              	# __name:
 1884 0578 00000000 		.quad	.LC5
 1884      00000000 
 1885              	# __module_name:
 1886 0580 00000000 		.quad	.LC1
 1886      00000000 
 1887              	# __has_dynamic_init:
 1888 0588 00000000 		.quad	0
 1888      00000000 
 1889              	# __location:
 1890 0590 00000000 		.quad	0
 1890      00000000 
 1891              	# __odr_indicator:
 1892 0598 00000000 		.quad	0
 1892      00000000 
 1893              	# __beg:
 1894 05a0 00000000 		.quad	.Lubsan_data1088
 1894      00000000 
 1895              	# __size:
 1896 05a8 18000000 		.quad	24
 1896      00000000 
 1897              	# __size_with_redzone:
 1898 05b0 40000000 		.quad	64
 1898      00000000 
 1899              	# __name:
 1900 05b8 00000000 		.quad	.LC6
 1900      00000000 
 1901              	# __module_name:
 1902 05c0 00000000 		.quad	.LC1
 1902      00000000 
 1903              	# __has_dynamic_init:
 1904 05c8 00000000 		.quad	0
 1904      00000000 
 1905              	# __location:
 1906 05d0 00000000 		.quad	0
 1906      00000000 
 1907              	# __odr_indicator:
 1908 05d8 00000000 		.quad	0
 1908      00000000 
 1909              	# __beg:
 1910 05e0 00000000 		.quad	.Lubsan_type14
 1910      00000000 
 1911              	# __size:
 1912 05e8 0A000000 		.quad	10
 1912      00000000 
 1913              	# __size_with_redzone:
 1914 05f0 40000000 		.quad	64
 1914      00000000 
 1915              	# __name:
 1916 05f8 00000000 		.quad	.LC7
 1916      00000000 
 1917              	# __module_name:
 1918 0600 00000000 		.quad	.LC1
 1918      00000000 
 1919              	# __has_dynamic_init:
 1920 0608 00000000 		.quad	0
 1920      00000000 
 1921              	# __location:
 1922 0610 00000000 		.quad	0
 1922      00000000 
 1923              	# __odr_indicator:
 1924 0618 00000000 		.quad	0
 1924      00000000 
 1925              	# __beg:
 1926 0620 00000000 		.quad	.Lubsan_data1087
 1926      00000000 
 1927              	# __size:
 1928 0628 28000000 		.quad	40
 1928      00000000 
 1929              	# __size_with_redzone:
 1930 0630 60000000 		.quad	96
 1930      00000000 
 1931              	# __name:
 1932 0638 00000000 		.quad	.LC8
 1932      00000000 
 1933              	# __module_name:
 1934 0640 00000000 		.quad	.LC1
 1934      00000000 
 1935              	# __has_dynamic_init:
 1936 0648 00000000 		.quad	0
 1936      00000000 
 1937              	# __location:
 1938 0650 00000000 		.quad	0
 1938      00000000 
 1939              	# __odr_indicator:
 1940 0658 00000000 		.quad	0
 1940      00000000 
 1941              	# __beg:
 1942 0660 00000000 		.quad	.Lubsan_data1086
 1942      00000000 
 1943              	# __size:
 1944 0668 20000000 		.quad	32
 1944      00000000 
 1945              	# __size_with_redzone:
 1946 0670 40000000 		.quad	64
 1946      00000000 
 1947              	# __name:
 1948 0678 00000000 		.quad	.LC9
 1948      00000000 
 1949              	# __module_name:
 1950 0680 00000000 		.quad	.LC1
 1950      00000000 
 1951              	# __has_dynamic_init:
 1952 0688 00000000 		.quad	0
 1952      00000000 
 1953              	# __location:
 1954 0690 00000000 		.quad	0
 1954      00000000 
 1955              	# __odr_indicator:
 1956 0698 00000000 		.quad	0
 1956      00000000 
 1957              	# __beg:
 1958 06a0 00000000 		.quad	.Lubsan_data1085
 1958      00000000 
 1959              	# __size:
 1960 06a8 10000000 		.quad	16
 1960      00000000 
 1961              	# __size_with_redzone:
 1962 06b0 40000000 		.quad	64
 1962      00000000 
 1963              	# __name:
 1964 06b8 00000000 		.quad	.LC10
 1964      00000000 
 1965              	# __module_name:
 1966 06c0 00000000 		.quad	.LC1
 1966      00000000 
 1967              	# __has_dynamic_init:
 1968 06c8 00000000 		.quad	0
 1968      00000000 
 1969              	# __location:
 1970 06d0 00000000 		.quad	0
 1970      00000000 
 1971              	# __odr_indicator:
 1972 06d8 00000000 		.quad	0
 1972      00000000 
 1973              	# __beg:
 1974 06e0 00000000 		.quad	.Lubsan_data1084
 1974      00000000 
 1975              	# __size:
 1976 06e8 28000000 		.quad	40
 1976      00000000 
 1977              	# __size_with_redzone:
 1978 06f0 60000000 		.quad	96
 1978      00000000 
 1979              	# __name:
 1980 06f8 00000000 		.quad	.LC11
 1980      00000000 
 1981              	# __module_name:
 1982 0700 00000000 		.quad	.LC1
 1982      00000000 
 1983              	# __has_dynamic_init:
 1984 0708 00000000 		.quad	0
 1984      00000000 
 1985              	# __location:
 1986 0710 00000000 		.quad	0
 1986      00000000 
 1987              	# __odr_indicator:
 1988 0718 00000000 		.quad	0
 1988      00000000 
 1989              	# __beg:
 1990 0720 00000000 		.quad	.Lubsan_data1083
 1990      00000000 
 1991              	# __size:
 1992 0728 10000000 		.quad	16
 1992      00000000 
 1993              	# __size_with_redzone:
 1994 0730 40000000 		.quad	64
 1994      00000000 
 1995              	# __name:
 1996 0738 00000000 		.quad	.LC12
 1996      00000000 
 1997              	# __module_name:
 1998 0740 00000000 		.quad	.LC1
 1998      00000000 
 1999              	# __has_dynamic_init:
 2000 0748 00000000 		.quad	0
 2000      00000000 
 2001              	# __location:
 2002 0750 00000000 		.quad	0
 2002      00000000 
 2003              	# __odr_indicator:
 2004 0758 00000000 		.quad	0
 2004      00000000 
 2005              	# __beg:
 2006 0760 00000000 		.quad	.Lubsan_data1082
 2006      00000000 
 2007              	# __size:
 2008 0768 10000000 		.quad	16
 2008      00000000 
 2009              	# __size_with_redzone:
 2010 0770 40000000 		.quad	64
 2010      00000000 
 2011              	# __name:
 2012 0778 00000000 		.quad	.LC13
 2012      00000000 
 2013              	# __module_name:
 2014 0780 00000000 		.quad	.LC1
 2014      00000000 
 2015              	# __has_dynamic_init:
 2016 0788 00000000 		.quad	0
 2016      00000000 
 2017              	# __location:
 2018 0790 00000000 		.quad	0
 2018      00000000 
 2019              	# __odr_indicator:
 2020 0798 00000000 		.quad	0
 2020      00000000 
 2021              	# __beg:
 2022 07a0 00000000 		.quad	.Lubsan_data1081
 2022      00000000 
 2023              	# __size:
 2024 07a8 20000000 		.quad	32
 2024      00000000 
 2025              	# __size_with_redzone:
 2026 07b0 40000000 		.quad	64
 2026      00000000 
 2027              	# __name:
 2028 07b8 00000000 		.quad	.LC14
 2028      00000000 
 2029              	# __module_name:
 2030 07c0 00000000 		.quad	.LC1
 2030      00000000 
 2031              	# __has_dynamic_init:
 2032 07c8 00000000 		.quad	0
 2032      00000000 
 2033              	# __location:
 2034 07d0 00000000 		.quad	0
 2034      00000000 
 2035              	# __odr_indicator:
 2036 07d8 00000000 		.quad	0
 2036      00000000 
 2037              	# __beg:
 2038 07e0 00000000 		.quad	.Lubsan_data1080
 2038      00000000 
 2039              	# __size:
 2040 07e8 10000000 		.quad	16
 2040      00000000 
 2041              	# __size_with_redzone:
 2042 07f0 40000000 		.quad	64
 2042      00000000 
 2043              	# __name:
 2044 07f8 00000000 		.quad	.LC15
 2044      00000000 
 2045              	# __module_name:
 2046 0800 00000000 		.quad	.LC1
 2046      00000000 
 2047              	# __has_dynamic_init:
 2048 0808 00000000 		.quad	0
 2048      00000000 
 2049              	# __location:
 2050 0810 00000000 		.quad	0
 2050      00000000 
 2051              	# __odr_indicator:
 2052 0818 00000000 		.quad	0
 2052      00000000 
 2053              	# __beg:
 2054 0820 00000000 		.quad	.Lubsan_data1079
 2054      00000000 
 2055              	# __size:
 2056 0828 20000000 		.quad	32
 2056      00000000 
 2057              	# __size_with_redzone:
 2058 0830 40000000 		.quad	64
 2058      00000000 
 2059              	# __name:
 2060 0838 00000000 		.quad	.LC16
 2060      00000000 
 2061              	# __module_name:
 2062 0840 00000000 		.quad	.LC1
 2062      00000000 
 2063              	# __has_dynamic_init:
 2064 0848 00000000 		.quad	0
 2064      00000000 
 2065              	# __location:
 2066 0850 00000000 		.quad	0
 2066      00000000 
 2067              	# __odr_indicator:
 2068 0858 00000000 		.quad	0
 2068      00000000 
 2069              	# __beg:
 2070 0860 00000000 		.quad	.Lubsan_data1078
 2070      00000000 
 2071              	# __size:
 2072 0868 10000000 		.quad	16
 2072      00000000 
 2073              	# __size_with_redzone:
 2074 0870 40000000 		.quad	64
 2074      00000000 
 2075              	# __name:
 2076 0878 00000000 		.quad	.LC17
 2076      00000000 
 2077              	# __module_name:
 2078 0880 00000000 		.quad	.LC1
 2078      00000000 
 2079              	# __has_dynamic_init:
 2080 0888 00000000 		.quad	0
 2080      00000000 
 2081              	# __location:
 2082 0890 00000000 		.quad	0
 2082      00000000 
 2083              	# __odr_indicator:
 2084 0898 00000000 		.quad	0
 2084      00000000 
 2085              	# __beg:
 2086 08a0 00000000 		.quad	.Lubsan_data1077
 2086      00000000 
 2087              	# __size:
 2088 08a8 28000000 		.quad	40
 2088      00000000 
 2089              	# __size_with_redzone:
 2090 08b0 60000000 		.quad	96
 2090      00000000 
 2091              	# __name:
 2092 08b8 00000000 		.quad	.LC18
 2092      00000000 
 2093              	# __module_name:
 2094 08c0 00000000 		.quad	.LC1
 2094      00000000 
 2095              	# __has_dynamic_init:
 2096 08c8 00000000 		.quad	0
 2096      00000000 
 2097              	# __location:
 2098 08d0 00000000 		.quad	0
 2098      00000000 
 2099              	# __odr_indicator:
 2100 08d8 00000000 		.quad	0
 2100      00000000 
 2101              	# __beg:
 2102 08e0 00000000 		.quad	.Lubsan_data1076
 2102      00000000 
 2103              	# __size:
 2104 08e8 20000000 		.quad	32
 2104      00000000 
 2105              	# __size_with_redzone:
 2106 08f0 40000000 		.quad	64
 2106      00000000 
 2107              	# __name:
 2108 08f8 00000000 		.quad	.LC19
 2108      00000000 
 2109              	# __module_name:
 2110 0900 00000000 		.quad	.LC1
 2110      00000000 
 2111              	# __has_dynamic_init:
 2112 0908 00000000 		.quad	0
 2112      00000000 
 2113              	# __location:
 2114 0910 00000000 		.quad	0
 2114      00000000 
 2115              	# __odr_indicator:
 2116 0918 00000000 		.quad	0
 2116      00000000 
 2117              	# __beg:
 2118 0920 00000000 		.quad	.Lubsan_type13
 2118      00000000 
 2119              	# __size:
 2120 0928 1B000000 		.quad	27
 2120      00000000 
 2121              	# __size_with_redzone:
 2122 0930 40000000 		.quad	64
 2122      00000000 
 2123              	# __name:
 2124 0938 00000000 		.quad	.LC20
 2124      00000000 
 2125              	# __module_name:
 2126 0940 00000000 		.quad	.LC1
 2126      00000000 
 2127              	# __has_dynamic_init:
 2128 0948 00000000 		.quad	0
 2128      00000000 
 2129              	# __location:
 2130 0950 00000000 		.quad	0
 2130      00000000 
 2131              	# __odr_indicator:
 2132 0958 00000000 		.quad	0
 2132      00000000 
 2133              	# __beg:
 2134 0960 00000000 		.quad	.Lubsan_data1075
 2134      00000000 
 2135              	# __size:
 2136 0968 28000000 		.quad	40
 2136      00000000 
 2137              	# __size_with_redzone:
 2138 0970 60000000 		.quad	96
 2138      00000000 
 2139              	# __name:
 2140 0978 00000000 		.quad	.LC21
 2140      00000000 
 2141              	# __module_name:
 2142 0980 00000000 		.quad	.LC1
 2142      00000000 
 2143              	# __has_dynamic_init:
 2144 0988 00000000 		.quad	0
 2144      00000000 
 2145              	# __location:
 2146 0990 00000000 		.quad	0
 2146      00000000 
 2147              	# __odr_indicator:
 2148 0998 00000000 		.quad	0
 2148      00000000 
 2149              	# __beg:
 2150 09a0 00000000 		.quad	.Lubsan_type12
 2150      00000000 
 2151              	# __size:
 2152 09a8 14000000 		.quad	20
 2152      00000000 
 2153              	# __size_with_redzone:
 2154 09b0 40000000 		.quad	64
 2154      00000000 
 2155              	# __name:
 2156 09b8 00000000 		.quad	.LC22
 2156      00000000 
 2157              	# __module_name:
 2158 09c0 00000000 		.quad	.LC1
 2158      00000000 
 2159              	# __has_dynamic_init:
 2160 09c8 00000000 		.quad	0
 2160      00000000 
 2161              	# __location:
 2162 09d0 00000000 		.quad	0
 2162      00000000 
 2163              	# __odr_indicator:
 2164 09d8 00000000 		.quad	0
 2164      00000000 
 2165              	# __beg:
 2166 09e0 00000000 		.quad	.Lubsan_data1074
 2166      00000000 
 2167              	# __size:
 2168 09e8 10000000 		.quad	16
 2168      00000000 
 2169              	# __size_with_redzone:
 2170 09f0 40000000 		.quad	64
 2170      00000000 
 2171              	# __name:
 2172 09f8 00000000 		.quad	.LC23
 2172      00000000 
 2173              	# __module_name:
 2174 0a00 00000000 		.quad	.LC1
 2174      00000000 
 2175              	# __has_dynamic_init:
 2176 0a08 00000000 		.quad	0
 2176      00000000 
 2177              	# __location:
 2178 0a10 00000000 		.quad	0
 2178      00000000 
 2179              	# __odr_indicator:
 2180 0a18 00000000 		.quad	0
 2180      00000000 
 2181              	# __beg:
 2182 0a20 00000000 		.quad	.Lubsan_data1073
 2182      00000000 
 2183              	# __size:
 2184 0a28 20000000 		.quad	32
 2184      00000000 
 2185              	# __size_with_redzone:
 2186 0a30 40000000 		.quad	64
 2186      00000000 
 2187              	# __name:
 2188 0a38 00000000 		.quad	.LC24
 2188      00000000 
 2189              	# __module_name:
 2190 0a40 00000000 		.quad	.LC1
 2190      00000000 
 2191              	# __has_dynamic_init:
 2192 0a48 00000000 		.quad	0
 2192      00000000 
 2193              	# __location:
 2194 0a50 00000000 		.quad	0
 2194      00000000 
 2195              	# __odr_indicator:
 2196 0a58 00000000 		.quad	0
 2196      00000000 
 2197              	# __beg:
 2198 0a60 00000000 		.quad	.Lubsan_type11
 2198      00000000 
 2199              	# __size:
 2200 0a68 1C000000 		.quad	28
 2200      00000000 
 2201              	# __size_with_redzone:
 2202 0a70 40000000 		.quad	64
 2202      00000000 
 2203              	# __name:
 2204 0a78 00000000 		.quad	.LC25
 2204      00000000 
 2205              	# __module_name:
 2206 0a80 00000000 		.quad	.LC1
 2206      00000000 
 2207              	# __has_dynamic_init:
 2208 0a88 00000000 		.quad	0
 2208      00000000 
 2209              	# __location:
 2210 0a90 00000000 		.quad	0
 2210      00000000 
 2211              	# __odr_indicator:
 2212 0a98 00000000 		.quad	0
 2212      00000000 
 2213              	# __beg:
 2214 0aa0 00000000 		.quad	.Lubsan_data1072
 2214      00000000 
 2215              	# __size:
 2216 0aa8 28000000 		.quad	40
 2216      00000000 
 2217              	# __size_with_redzone:
 2218 0ab0 60000000 		.quad	96
 2218      00000000 
 2219              	# __name:
 2220 0ab8 00000000 		.quad	.LC26
 2220      00000000 
 2221              	# __module_name:
 2222 0ac0 00000000 		.quad	.LC1
 2222      00000000 
 2223              	# __has_dynamic_init:
 2224 0ac8 00000000 		.quad	0
 2224      00000000 
 2225              	# __location:
 2226 0ad0 00000000 		.quad	0
 2226      00000000 
 2227              	# __odr_indicator:
 2228 0ad8 00000000 		.quad	0
 2228      00000000 
 2229              	# __beg:
 2230 0ae0 00000000 		.quad	.Lubsan_type10
 2230      00000000 
 2231              	# __size:
 2232 0ae8 0F000000 		.quad	15
 2232      00000000 
 2233              	# __size_with_redzone:
 2234 0af0 40000000 		.quad	64
 2234      00000000 
 2235              	# __name:
 2236 0af8 00000000 		.quad	.LC27
 2236      00000000 
 2237              	# __module_name:
 2238 0b00 00000000 		.quad	.LC1
 2238      00000000 
 2239              	# __has_dynamic_init:
 2240 0b08 00000000 		.quad	0
 2240      00000000 
 2241              	# __location:
 2242 0b10 00000000 		.quad	0
 2242      00000000 
 2243              	# __odr_indicator:
 2244 0b18 00000000 		.quad	0
 2244      00000000 
 2245              	# __beg:
 2246 0b20 00000000 		.quad	.Lubsan_data1071
 2246      00000000 
 2247              	# __size:
 2248 0b28 10000000 		.quad	16
 2248      00000000 
 2249              	# __size_with_redzone:
 2250 0b30 40000000 		.quad	64
 2250      00000000 
 2251              	# __name:
 2252 0b38 00000000 		.quad	.LC28
 2252      00000000 
 2253              	# __module_name:
 2254 0b40 00000000 		.quad	.LC1
 2254      00000000 
 2255              	# __has_dynamic_init:
 2256 0b48 00000000 		.quad	0
 2256      00000000 
 2257              	# __location:
 2258 0b50 00000000 		.quad	0
 2258      00000000 
 2259              	# __odr_indicator:
 2260 0b58 00000000 		.quad	0
 2260      00000000 
 2261              	# __beg:
 2262 0b60 00000000 		.quad	.Lubsan_data1070
 2262      00000000 
 2263              	# __size:
 2264 0b68 28000000 		.quad	40
 2264      00000000 
 2265              	# __size_with_redzone:
 2266 0b70 60000000 		.quad	96
 2266      00000000 
 2267              	# __name:
 2268 0b78 00000000 		.quad	.LC29
 2268      00000000 
 2269              	# __module_name:
 2270 0b80 00000000 		.quad	.LC1
 2270      00000000 
 2271              	# __has_dynamic_init:
 2272 0b88 00000000 		.quad	0
 2272      00000000 
 2273              	# __location:
 2274 0b90 00000000 		.quad	0
 2274      00000000 
 2275              	# __odr_indicator:
 2276 0b98 00000000 		.quad	0
 2276      00000000 
 2277              	# __beg:
 2278 0ba0 00000000 		.quad	.Lubsan_type9
 2278      00000000 
 2279              	# __size:
 2280 0ba8 10000000 		.quad	16
 2280      00000000 
 2281              	# __size_with_redzone:
 2282 0bb0 40000000 		.quad	64
 2282      00000000 
 2283              	# __name:
 2284 0bb8 00000000 		.quad	.LC30
 2284      00000000 
 2285              	# __module_name:
 2286 0bc0 00000000 		.quad	.LC1
 2286      00000000 
 2287              	# __has_dynamic_init:
 2288 0bc8 00000000 		.quad	0
 2288      00000000 
 2289              	# __location:
 2290 0bd0 00000000 		.quad	0
 2290      00000000 
 2291              	# __odr_indicator:
 2292 0bd8 00000000 		.quad	0
 2292      00000000 
 2293              	# __beg:
 2294 0be0 00000000 		.quad	.Lubsan_data1069
 2294      00000000 
 2295              	# __size:
 2296 0be8 10000000 		.quad	16
 2296      00000000 
 2297              	# __size_with_redzone:
 2298 0bf0 40000000 		.quad	64
 2298      00000000 
 2299              	# __name:
 2300 0bf8 00000000 		.quad	.LC31
 2300      00000000 
 2301              	# __module_name:
 2302 0c00 00000000 		.quad	.LC1
 2302      00000000 
 2303              	# __has_dynamic_init:
 2304 0c08 00000000 		.quad	0
 2304      00000000 
 2305              	# __location:
 2306 0c10 00000000 		.quad	0
 2306      00000000 
 2307              	# __odr_indicator:
 2308 0c18 00000000 		.quad	0
 2308      00000000 
 2309              	# __beg:
 2310 0c20 00000000 		.quad	.Lubsan_data1068
 2310      00000000 
 2311              	# __size:
 2312 0c28 10000000 		.quad	16
 2312      00000000 
 2313              	# __size_with_redzone:
 2314 0c30 40000000 		.quad	64
 2314      00000000 
 2315              	# __name:
 2316 0c38 00000000 		.quad	.LC32
 2316      00000000 
 2317              	# __module_name:
 2318 0c40 00000000 		.quad	.LC1
 2318      00000000 
 2319              	# __has_dynamic_init:
 2320 0c48 00000000 		.quad	0
 2320      00000000 
 2321              	# __location:
 2322 0c50 00000000 		.quad	0
 2322      00000000 
 2323              	# __odr_indicator:
 2324 0c58 00000000 		.quad	0
 2324      00000000 
 2325              	# __beg:
 2326 0c60 00000000 		.quad	.Lubsan_data1067
 2326      00000000 
 2327              	# __size:
 2328 0c68 20000000 		.quad	32
 2328      00000000 
 2329              	# __size_with_redzone:
 2330 0c70 40000000 		.quad	64
 2330      00000000 
 2331              	# __name:
 2332 0c78 00000000 		.quad	.LC33
 2332      00000000 
 2333              	# __module_name:
 2334 0c80 00000000 		.quad	.LC1
 2334      00000000 
 2335              	# __has_dynamic_init:
 2336 0c88 00000000 		.quad	0
 2336      00000000 
 2337              	# __location:
 2338 0c90 00000000 		.quad	0
 2338      00000000 
 2339              	# __odr_indicator:
 2340 0c98 00000000 		.quad	0
 2340      00000000 
 2341              	# __beg:
 2342 0ca0 00000000 		.quad	.Lubsan_type8
 2342      00000000 
 2343              	# __size:
 2344 0ca8 17000000 		.quad	23
 2344      00000000 
 2345              	# __size_with_redzone:
 2346 0cb0 40000000 		.quad	64
 2346      00000000 
 2347              	# __name:
 2348 0cb8 00000000 		.quad	.LC34
 2348      00000000 
 2349              	# __module_name:
 2350 0cc0 00000000 		.quad	.LC1
 2350      00000000 
 2351              	# __has_dynamic_init:
 2352 0cc8 00000000 		.quad	0
 2352      00000000 
 2353              	# __location:
 2354 0cd0 00000000 		.quad	0
 2354      00000000 
 2355              	# __odr_indicator:
 2356 0cd8 00000000 		.quad	0
 2356      00000000 
 2357              	# __beg:
 2358 0ce0 00000000 		.quad	.Lubsan_data1066
 2358      00000000 
 2359              	# __size:
 2360 0ce8 10000000 		.quad	16
 2360      00000000 
 2361              	# __size_with_redzone:
 2362 0cf0 40000000 		.quad	64
 2362      00000000 
 2363              	# __name:
 2364 0cf8 00000000 		.quad	.LC35
 2364      00000000 
 2365              	# __module_name:
 2366 0d00 00000000 		.quad	.LC1
 2366      00000000 
 2367              	# __has_dynamic_init:
 2368 0d08 00000000 		.quad	0
 2368      00000000 
 2369              	# __location:
 2370 0d10 00000000 		.quad	0
 2370      00000000 
 2371              	# __odr_indicator:
 2372 0d18 00000000 		.quad	0
 2372      00000000 
 2373              	# __beg:
 2374 0d20 00000000 		.quad	.Lubsan_data1065
 2374      00000000 
 2375              	# __size:
 2376 0d28 20000000 		.quad	32
 2376      00000000 
 2377              	# __size_with_redzone:
 2378 0d30 40000000 		.quad	64
 2378      00000000 
 2379              	# __name:
 2380 0d38 00000000 		.quad	.LC36
 2380      00000000 
 2381              	# __module_name:
 2382 0d40 00000000 		.quad	.LC1
 2382      00000000 
 2383              	# __has_dynamic_init:
 2384 0d48 00000000 		.quad	0
 2384      00000000 
 2385              	# __location:
 2386 0d50 00000000 		.quad	0
 2386      00000000 
 2387              	# __odr_indicator:
 2388 0d58 00000000 		.quad	0
 2388      00000000 
 2389              	# __beg:
 2390 0d60 00000000 		.quad	.Lubsan_type7
 2390      00000000 
 2391              	# __size:
 2392 0d68 0F000000 		.quad	15
 2392      00000000 
 2393              	# __size_with_redzone:
 2394 0d70 40000000 		.quad	64
 2394      00000000 
 2395              	# __name:
 2396 0d78 00000000 		.quad	.LC37
 2396      00000000 
 2397              	# __module_name:
 2398 0d80 00000000 		.quad	.LC1
 2398      00000000 
 2399              	# __has_dynamic_init:
 2400 0d88 00000000 		.quad	0
 2400      00000000 
 2401              	# __location:
 2402 0d90 00000000 		.quad	0
 2402      00000000 
 2403              	# __odr_indicator:
 2404 0d98 00000000 		.quad	0
 2404      00000000 
 2405              	# __beg:
 2406 0da0 00000000 		.quad	.Lubsan_data1064
 2406      00000000 
 2407              	# __size:
 2408 0da8 10000000 		.quad	16
 2408      00000000 
 2409              	# __size_with_redzone:
 2410 0db0 40000000 		.quad	64
 2410      00000000 
 2411              	# __name:
 2412 0db8 00000000 		.quad	.LC38
 2412      00000000 
 2413              	# __module_name:
 2414 0dc0 00000000 		.quad	.LC1
 2414      00000000 
 2415              	# __has_dynamic_init:
 2416 0dc8 00000000 		.quad	0
 2416      00000000 
 2417              	# __location:
 2418 0dd0 00000000 		.quad	0
 2418      00000000 
 2419              	# __odr_indicator:
 2420 0dd8 00000000 		.quad	0
 2420      00000000 
 2421              	# __beg:
 2422 0de0 00000000 		.quad	.Lubsan_data1063
 2422      00000000 
 2423              	# __size:
 2424 0de8 28000000 		.quad	40
 2424      00000000 
 2425              	# __size_with_redzone:
 2426 0df0 60000000 		.quad	96
 2426      00000000 
 2427              	# __name:
 2428 0df8 00000000 		.quad	.LC39
 2428      00000000 
 2429              	# __module_name:
 2430 0e00 00000000 		.quad	.LC1
 2430      00000000 
 2431              	# __has_dynamic_init:
 2432 0e08 00000000 		.quad	0
 2432      00000000 
 2433              	# __location:
 2434 0e10 00000000 		.quad	0
 2434      00000000 
 2435              	# __odr_indicator:
 2436 0e18 00000000 		.quad	0
 2436      00000000 
 2437              	# __beg:
 2438 0e20 00000000 		.quad	.Lubsan_data1062
 2438      00000000 
 2439              	# __size:
 2440 0e28 20000000 		.quad	32
 2440      00000000 
 2441              	# __size_with_redzone:
 2442 0e30 40000000 		.quad	64
 2442      00000000 
 2443              	# __name:
 2444 0e38 00000000 		.quad	.LC40
 2444      00000000 
 2445              	# __module_name:
 2446 0e40 00000000 		.quad	.LC1
 2446      00000000 
 2447              	# __has_dynamic_init:
 2448 0e48 00000000 		.quad	0
 2448      00000000 
 2449              	# __location:
 2450 0e50 00000000 		.quad	0
 2450      00000000 
 2451              	# __odr_indicator:
 2452 0e58 00000000 		.quad	0
 2452      00000000 
 2453              	# __beg:
 2454 0e60 00000000 		.quad	.Lubsan_type6
 2454      00000000 
 2455              	# __size:
 2456 0e68 1C000000 		.quad	28
 2456      00000000 
 2457              	# __size_with_redzone:
 2458 0e70 40000000 		.quad	64
 2458      00000000 
 2459              	# __name:
 2460 0e78 00000000 		.quad	.LC41
 2460      00000000 
 2461              	# __module_name:
 2462 0e80 00000000 		.quad	.LC1
 2462      00000000 
 2463              	# __has_dynamic_init:
 2464 0e88 00000000 		.quad	0
 2464      00000000 
 2465              	# __location:
 2466 0e90 00000000 		.quad	0
 2466      00000000 
 2467              	# __odr_indicator:
 2468 0e98 00000000 		.quad	0
 2468      00000000 
 2469              	# __beg:
 2470 0ea0 00000000 		.quad	.Lubsan_data1061
 2470      00000000 
 2471              	# __size:
 2472 0ea8 28000000 		.quad	40
 2472      00000000 
 2473              	# __size_with_redzone:
 2474 0eb0 60000000 		.quad	96
 2474      00000000 
 2475              	# __name:
 2476 0eb8 00000000 		.quad	.LC42
 2476      00000000 
 2477              	# __module_name:
 2478 0ec0 00000000 		.quad	.LC1
 2478      00000000 
 2479              	# __has_dynamic_init:
 2480 0ec8 00000000 		.quad	0
 2480      00000000 
 2481              	# __location:
 2482 0ed0 00000000 		.quad	0
 2482      00000000 
 2483              	# __odr_indicator:
 2484 0ed8 00000000 		.quad	0
 2484      00000000 
 2485              	# __beg:
 2486 0ee0 00000000 		.quad	.Lubsan_data1060
 2486      00000000 
 2487              	# __size:
 2488 0ee8 28000000 		.quad	40
 2488      00000000 
 2489              	# __size_with_redzone:
 2490 0ef0 60000000 		.quad	96
 2490      00000000 
 2491              	# __name:
 2492 0ef8 00000000 		.quad	.LC43
 2492      00000000 
 2493              	# __module_name:
 2494 0f00 00000000 		.quad	.LC1
 2494      00000000 
 2495              	# __has_dynamic_init:
 2496 0f08 00000000 		.quad	0
 2496      00000000 
 2497              	# __location:
 2498 0f10 00000000 		.quad	0
 2498      00000000 
 2499              	# __odr_indicator:
 2500 0f18 00000000 		.quad	0
 2500      00000000 
 2501              	# __beg:
 2502 0f20 00000000 		.quad	.Lubsan_type5
 2502      00000000 
 2503              	# __size:
 2504 0f28 14000000 		.quad	20
 2504      00000000 
 2505              	# __size_with_redzone:
 2506 0f30 40000000 		.quad	64
 2506      00000000 
 2507              	# __name:
 2508 0f38 00000000 		.quad	.LC44
 2508      00000000 
 2509              	# __module_name:
 2510 0f40 00000000 		.quad	.LC1
 2510      00000000 
 2511              	# __has_dynamic_init:
 2512 0f48 00000000 		.quad	0
 2512      00000000 
 2513              	# __location:
 2514 0f50 00000000 		.quad	0
 2514      00000000 
 2515              	# __odr_indicator:
 2516 0f58 00000000 		.quad	0
 2516      00000000 
 2517              	# __beg:
 2518 0f60 00000000 		.quad	_ZStL8__ioinit
 2518      00000000 
 2519              	# __size:
 2520 0f68 01000000 		.quad	1
 2520      00000000 
 2521              	# __size_with_redzone:
 2522 0f70 40000000 		.quad	64
 2522      00000000 
 2523              	# __name:
 2524 0f78 00000000 		.quad	.LC45
 2524      00000000 
 2525              	# __module_name:
 2526 0f80 00000000 		.quad	.LC1
 2526      00000000 
 2527              	# __has_dynamic_init:
 2528 0f88 01000000 		.quad	1
 2528      00000000 
 2529              	# __location:
 2530 0f90 00000000 		.quad	.LASANLOC1
 2530      00000000 
 2531              	# __odr_indicator:
 2532 0f98 00000000 		.quad	0
 2532      00000000 
 2533              	# __beg:
 2534 0fa0 00000000 		.quad	.LC2
 2534      00000000 
 2535              	# __size:
 2536 0fa8 20000000 		.quad	32
 2536      00000000 
 2537              	# __size_with_redzone:
 2538 0fb0 40000000 		.quad	64
 2538      00000000 
 2539              	# __name:
 2540 0fb8 00000000 		.quad	.LC46
 2540      00000000 
 2541              	# __module_name:
 2542 0fc0 00000000 		.quad	.LC1
 2542      00000000 
 2543              	# __has_dynamic_init:
 2544 0fc8 00000000 		.quad	0
 2544      00000000 
 2545              	# __location:
 2546 0fd0 00000000 		.quad	0
 2546      00000000 
 2547              	# __odr_indicator:
 2548 0fd8 00000000 		.quad	0
 2548      00000000 
 2549              	# __beg:
 2550 0fe0 00000000 		.quad	.LC3
 2550      00000000 
 2551              	# __size:
 2552 0fe8 29000000 		.quad	41
 2552      00000000 
 2553              	# __size_with_redzone:
 2554 0ff0 60000000 		.quad	96
 2554      00000000 
 2555              	# __name:
 2556 0ff8 00000000 		.quad	.LC47
 2556      00000000 
 2557              	# __module_name:
 2558 1000 00000000 		.quad	.LC1
 2558      00000000 
 2559              	# __has_dynamic_init:
 2560 1008 00000000 		.quad	0
 2560      00000000 
 2561              	# __location:
 2562 1010 00000000 		.quad	0
 2562      00000000 
 2563              	# __odr_indicator:
 2564 1018 00000000 		.quad	0
 2564      00000000 
 2565              		.section	.text.exit,"ax",@progbits
 2566              		.p2align 4
 2568              	_sub_D_00099_0:
 2569              	.LFB12736:
 2570              		.cfi_startproc
 2571 0000 BE2B0000 		movl	$43, %esi	#,
 2571      00
 2572 0005 488D3D00 		leaq	.LASAN0(%rip), %rdi	#, tmp82
 2572      000000
 2573 000c E9000000 		jmp	__asan_unregister_globals@PLT	#
 2573      00
 2574              		.cfi_endproc
 2575              	.LFE12736:
 2577              		.section	.fini_array.00099,"aw"
 2578              		.align 8
 2579 0000 00000000 		.quad	_sub_D_00099_0
 2579      00000000 
 2580              		.section	.text.startup
 2581 0a38 0F1F8400 		.p2align 4
 2581      00000000 
 2583              	_sub_I_00099_1:
 2584              	.LFB12737:
 2585              		.cfi_startproc
 2586 0a40 4883EC08 		subq	$8, %rsp	#,
 2587              		.cfi_def_cfa_offset 16
 2588 0a44 E8000000 		call	__asan_init@PLT	#
 2588      00
 2589 0a49 E8000000 		call	__asan_version_mismatch_check_v8@PLT	#
 2589      00
 2590 0a4e BE2B0000 		movl	$43, %esi	#,
 2590      00
 2591 0a53 488D3D00 		leaq	.LASAN0(%rip), %rdi	#, tmp82
 2591      000000
 2592 0a5a 4883C408 		addq	$8, %rsp	#,
 2593              		.cfi_def_cfa_offset 8
 2594 0a5e E9000000 		jmp	__asan_register_globals@PLT	#
 2594      00
 2595              		.cfi_endproc
 2596              	.LFE12737:
 2598              		.section	.init_array.00099,"aw"
 2599              		.align 8
 2600 0000 00000000 		.quad	_sub_I_00099_1
 2600      00000000 
 2601              		.text
 2602              	.Letext0:
 2603              		.file 6 "/usr/include/bits/types.h"
 2604              		.file 7 "/usr/include/locale.h"
 2605              		.file 8 "/usr/include/c++/11.1.0/clocale"
 2606              		.file 9 "/usr/include/c++/11.1.0/cmath"
 2607              		.file 10 "/usr/include/c++/11.1.0/type_traits"
 2608              		.file 11 "/usr/include/c++/11.1.0/x86_64-pc-linux-gnu/bits/c++config.h"
 2609              		.file 12 "/usr/include/c++/11.1.0/csetjmp"
 2610              		.file 13 "/usr/include/c++/11.1.0/csignal"
 2611              		.file 14 "/usr/include/c++/11.1.0/cstdarg"
 2612              		.file 15 "/usr/include/c++/11.1.0/cstddef"
 2613              		.file 16 "/usr/include/c++/11.1.0/cstdio"
 2614              		.file 17 "/usr/include/c++/11.1.0/cstdlib"
 2615              		.file 18 "/usr/include/c++/11.1.0/cstring"
 2616              		.file 19 "/usr/include/c++/11.1.0/ctime"
 2617              		.file 20 "/usr/include/c++/11.1.0/cwchar"
 2618              		.file 21 "/usr/include/c++/11.1.0/cwctype"
 2619              		.file 22 "/usr/include/c++/11.1.0/bits/exception_ptr.h"
 2620              		.file 23 "/usr/include/c++/11.1.0/bits/char_traits.h"
 2621              		.file 24 "/usr/include/c++/11.1.0/cstdint"
 2622              		.file 25 "/usr/include/c++/11.1.0/bits/ostream.tcc"
 2623              		.file 26 "/usr/include/c++/11.1.0/istream"
 2624              		.file 27 "/usr/include/c++/11.1.0/bits/locale_facets.h"
 2625              		.file 28 "/usr/include/c++/11.1.0/fenv.h"
 2626              		.file 29 "/usr/include/c++/11.1.0/cfenv"
 2627              		.file 30 "/usr/include/c++/11.1.0/cinttypes"
 2628              		.file 31 "/usr/include/c++/11.1.0/cuchar"
 2629              		.file 32 "/usr/include/c++/11.1.0/bits/stl_iterator.h"
 2630              		.file 33 "/usr/include/c++/11.1.0/bits/regex_automaton.h"
 2631              		.file 34 "/usr/include/c++/11.1.0/bits/basic_string.h"
 2632              		.file 35 "/usr/include/c++/11.1.0/functional"
 2633              		.file 36 "/usr/include/c++/11.1.0/iosfwd"
 2634              		.file 37 "/usr/include/c++/11.1.0/bits/shared_ptr_base.h"
 2635              		.file 38 "/usr/include/c++/11.1.0/bits/atomic_base.h"
 2636              		.file 39 "/usr/include/c++/11.1.0/chrono"
 2637              		.file 40 "/usr/include/c++/11.1.0/system_error"
 2638              		.file 41 "/usr/include/c++/11.1.0/bits/fs_fwd.h"
 2639              		.file 42 "/usr/include/c++/11.1.0/bits/fs_path.h"
 2640              		.file 43 "/usr/include/c++/11.1.0/bits/regex_constants.h"
 2641              		.file 44 "/usr/include/c++/11.1.0/bits/regex_error.h"
 2642              		.file 45 "/usr/include/c++/11.1.0/vector"
 2643              		.file 46 "/usr/include/c++/11.1.0/string"
 2644              		.file 47 "/usr/include/c++/11.1.0/bits/predefined_ops.h"
 2645              		.file 48 "/usr/include/c++/11.1.0/ext/concurrence.h"
 2646              		.file 49 "/usr/include/math.h"
 2647              		.file 50 "/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h"
 2648              		.file 51 "/usr/include/stdlib.h"
 2649              		.file 52 "/usr/include/bits/types/clock_t.h"
 2650              		.file 53 "/usr/include/bits/types/time_t.h"
 2651              		.file 54 "/usr/include/bits/stdint-intn.h"
 2652              		.file 55 "/usr/include/bits/types/__sigset_t.h"
 2653              		.file 56 "/usr/include/bits/types/struct_timespec.h"
 2654              		.file 57 "/usr/include/c++/11.1.0/debug/helper_functions.h"
 2655              		.file 58 "/usr/include/c++/11.1.0/debug/debug.h"
 2656              		.file 59 "/usr/include/c++/11.1.0/debug/formatter.h"
 2657              		.file 60 "/usr/include/bits/setjmp.h"
 2658              		.file 61 "/usr/include/bits/types/struct___jmp_buf_tag.h"
 2659              		.file 62 "/usr/include/setjmp.h"
 2660              		.file 63 "/usr/include/bits/setjmp2.h"
 2661              		.file 64 "/usr/include/bits/types/sig_atomic_t.h"
 2662              		.file 65 "/usr/include/signal.h"
 2663              		.file 66 "/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stdarg.h"
 2664              		.file 67 "<built-in>"
 2665              		.file 68 "/usr/include/bits/types/__mbstate_t.h"
 2666              		.file 69 "/usr/include/bits/types/__fpos_t.h"
 2667              		.file 70 "/usr/include/bits/types/__FILE.h"
 2668              		.file 71 "/usr/include/bits/types/struct_FILE.h"
 2669              		.file 72 "/usr/include/bits/types/FILE.h"
 2670              		.file 73 "/usr/include/stdio.h"
 2671              		.file 74 "/usr/include/bits/stdio2.h"
 2672              		.file 75 "/usr/include/bits/stdio.h"
 2673              		.file 76 "/usr/include/bits/stdlib-float.h"
 2674              		.file 77 "/usr/include/bits/stdlib-bsearch.h"
 2675              		.file 78 "/usr/include/bits/stdlib.h"
 2676              		.file 79 "/usr/include/string.h"
 2677              		.file 80 "/usr/include/bits/types/struct_tm.h"
 2678              		.file 81 "/usr/include/time.h"
 2679              		.file 82 "/usr/include/bits/types/wint_t.h"
 2680              		.file 83 "/usr/include/bits/types/mbstate_t.h"
 2681              		.file 84 "/usr/include/wchar.h"
 2682              		.file 85 "/usr/include/bits/wchar2.h"
 2683              		.file 86 "/usr/include/bits/wctype-wchar.h"
 2684              		.file 87 "/usr/include/wctype.h"
 2685              		.file 88 "/usr/include/bits/stdint-uintn.h"
 2686              		.file 89 "/usr/include/stdint.h"
 2687              		.file 90 "/usr/include/bits/fenv.h"
 2688              		.file 91 "/usr/include/inttypes.h"
 2689              		.file 92 "/usr/include/uchar.h"
 2690              		.file 93 "/usr/include/c++/11.1.0/pstl/execution_defs.h"
 2691              		.file 94 "/usr/include/c++/11.1.0/string_view"
 2692              		.file 95 "/usr/include/c++/11.1.0/future"
 2693              		.file 96 "/usr/include/c++/11.1.0/bits/functexcept.h"
